"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[3741],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return p}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=a.createContext({}),c=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(l.Provider,{value:e},n.children)},g={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,s=n.originalType,l=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),d=c(t),p=r,m=d["".concat(l,".").concat(p)]||d[p]||g[p]||s;return t?a.createElement(m,o(o({ref:e},u),{},{components:t})):a.createElement(m,o({ref:e},u))}));function p(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=t.length,o=new Array(s);o[0]=d;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i.mdxType="string"==typeof n?n:r,o[1]=i;for(var c=2;c<s;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},80973:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return g}});var a=t(83117),r=t(80102),s=(t(67294),t(3905)),o=["components"],i={keywords:["solana sendTransaction","dapp:sendTransaction","solana","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in solana"},l="Solana",c={unversionedId:"tutorials/kms/solana",id:"tutorials/kms/solana",title:"Solana",description:"Sending Transactions using @dsrv/kms in solana",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/tutorials/kms/solana.md",sourceDirName:"tutorials/kms",slug:"/tutorials/kms/solana",permalink:"/ko/tutorials/kms/solana",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/kms/solana.md",tags:[],version:"current",frontMatter:{keywords:["solana sendTransaction","dapp:sendTransaction","solana","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in solana"},sidebar:"tutorialSidebar",previous:{title:"Near",permalink:"/ko/tutorials/kms/near"},next:{title:"Near Counter dApp",permalink:"/ko/tutorials/near/"}},u={},g=[{value:"Signed transaction \uc0dd\uc131\ud558\uae30",id:"signed-transaction-\uc0dd\uc131\ud558\uae30",level:2},{value:"1. getSolanaTx",id:"1-getsolanatx",level:3},{value:"2. getSolanaSignature",id:"2-getsolanasignature",level:3},{value:"3. createSolanaSignedTx",id:"3-createsolanasignedtx",level:3},{value:"Signed transaction \uc804\uc1a1\ud558\uae30",id:"signed-transaction-\uc804\uc1a1\ud558\uae30",level:2},{value:"Examples",id:"examples",level:2}],d={toc:g};function p(n){var e=n.components,t=(0,r.Z)(n,o);return(0,s.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"solana"},"Solana"),(0,s.kt)("div",null,(0,s.kt)("span",{className:"author-sm"},"November 11, 2022"),(0,s.kt)("div",{className:"author-div"},(0,s.kt)("div",{className:"author-avatars"},(0,s.kt)("a",{href:"https://github.com/Nahee-Park",target:"_blank"},(0,s.kt)("img",{src:"https://avatars.githubusercontent.com/u/81923229?v=4"}))),(0,s.kt)("div",null,(0,s.kt)("span",{className:"author-name"},"Nahee Park"),(0,s.kt)("br",null),(0,s.kt)("span",{className:"author-sm"},"Software Engineer, DSRV ")))),(0,s.kt)("br",null),(0,s.kt)("admonition",{title:"Prerequisites",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Solana \ud30c\ud2b8\uc5d0\uc11c\ub294 ",(0,s.kt)("a",{parentName:"p",href:"https://solana-labs.github.io/solana-web3.js/"},"@solana/web3.js"),"\ub97c \ucd94\uac00\ub85c \uc774\uc6a9\ud558\uc5ec \uc2e4\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud328\ud0a4\uc9c0\ub97c \ubbf8\ub9ac \uc124\uce58\ud574\uc8fc\uc138\uc694.")),(0,s.kt)("h2",{id:"signed-transaction-\uc0dd\uc131\ud558\uae30"},"Signed transaction \uc0dd\uc131\ud558\uae30"),(0,s.kt)("p",null,"signed transaction\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \ud06c\uac8c \uc138 \uac00\uc9c0 \uc808\ucc28\ub97c \uac70\uccd0\uc57c \ud569\ub2c8\ub2e4."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"raw transaction \uc0dd\uc131"),(0,s.kt)("li",{parentName:"ol"},"raw transaction\uc5d0 \ub300\ud55c signature \uc0dd\uc131"),(0,s.kt)("li",{parentName:"ol"},"raw transaction\uacfc signature\uc744 \ud569\uccd0 signed transaction \uc0dd\uc131")),(0,s.kt)("h3",{id:"1-getsolanatx"},"1. getSolanaTx"),(0,s.kt)("p",null,"signed transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 raw transaction\uacfc signature\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. kms\ub97c \ud1b5\ud574 signature\ub97c \uc5bb\uae30 \uc704\ud574\uc120 raw transaction\uc774 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 raw transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c ",(0,s.kt)("inlineCode",{parentName:"p"},"getSolanaTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getSolanaTx.ts"',title:'"getSolanaTx.ts"'},"import { Solana } from '@dsrv/kms';\nimport { Account, CHAIN } from '@dsrv/kms/src/types';\nimport {\n  Connection,\n  SystemProgram,\n  PublicKey,\n  LAMPORTS_PER_SOL,\n  Transaction,\n  Keypair,\n} from '@solana/web3.js';\nimport { base58 } from 'ethers/lib/utils';\n\ninterface RawTransaction {\n  unSignedTx: Transaction;\n  serializedTx: string;\n}\n\nexport const getSolanaTx = async (mnemonic: string): Promise<RawTransaction> => {\n  /* 1. get signer */\n  const privateKey = Solana.getPrivateKey({\n    mnemonic,\n    path: { type: CHAIN.SOLANA, account: 0, index: 0 },\n  });\n  const signer = Keypair.fromSecretKey(base58.decode(privateKey));\n\n  /* 2. make raw transaction */\n  const connection = new Connection('https://api.devnet.solana.com', 'confirmed'); //allthatnode\n  const toAccountPubKey = new PublicKey('BnBydTNPrTwDz4ZSkhJiGiSZwakPQFVeN8rgdAS2Yc7F'); //allthatnode\n  const RecentBlockHash = await connection.getLatestBlockhash();\n\n  const transaction = new Transaction({\n    /* new blockHash */\n    blockhash: RecentBlockHash.blockhash,\n    lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n    feePayer: signer.publicKey,\n  });\n  transaction.add(\n    SystemProgram.transfer({\n      fromPubkey: signer.publicKey,\n      lamports: Number(0.1) * LAMPORTS_PER_SOL,\n      toPubkey: toAccountPubKey,\n    }),\n  );\n\n  return {\n    serializedTx: `0x${transaction.compileMessage().serialize().toString('hex')}`,\n    unSignedTx: transaction,\n  };\n};\n")),(0,s.kt)("h3",{id:"2-getsolanasignature"},"2. getSolanaSignature"),(0,s.kt)("p",null,"\ub2e4\uc74c\uc73c\ub85c transaction\uc5d0 \ub300\ud55c signature\ub97c \uc5bb\uae30 \uc704\ud574, serializedTx\ub97c \uc778\uc790\ub85c \ubc1b\uc544\uc11c signature\ub97c \uc0dd\uc131\ud558\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"getSolanaSignature")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getSolanaSignature.ts"',title:'"getSolanaSignature.ts"'},"import { CHAIN } from '@dsrv/kms/lib/types';\nimport { Solana } from '@dsrv/kms/lib/blockchains/solana';\n\nexport const getSolanaSignature = (serializedTx: string): string => {\n  const { signature } = Solana.signTx(\n    {\n      mnemonic,\n      path: { type: CHAIN.SOLANA, account: 0, index: 0 },\n    },\n    serializedTx,\n  );\n\n  return signature;\n};\n")),(0,s.kt)("h3",{id:"3-createsolanasignedtx"},"3. createSolanaSignedTx"),(0,s.kt)("p",null,"\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c ",(0,s.kt)("inlineCode",{parentName:"p"},"unSignedTx"),"\uc640 ",(0,s.kt)("inlineCode",{parentName:"p"},"signature"),"\ub97c \ud1b5\ud574 signed transaction\uc744 \ub9ac\ud134\ud574\uc8fc\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"createSolanaSignedTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="createSolanaSignedTx.ts"',title:'"createSolanaSignedTx.ts"'},"import { Transaction } from '@solana/web3.js';\n\ninterface createSolanaSignedTxProps {\n  unSignedTx: UnsignedTransaction;\n  signature: string;\n}\n\n/* create singedTx by combining tx and signature */\nexport const createSolanaSignedTx = ({\n  unSignedTx,\n  signature,\n}: createSolanaSignedTxProps): string => {\n  const bufferSig = Buffer.from(signature.replace('0x', ''), 'hex');\n  unSignedTx.addSignature(unSignedTx.feePayer, bufferSig);\n  const serializedTx = unSignedTx.serialize().toString('hex');\n  return serializedTx;\n};\n")),(0,s.kt)("p",null,"\ucd5c\uc885\uc801\uc73c\ub85c \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ud568\uc218, ",(0,s.kt)("inlineCode",{parentName:"p"},"getSolanaTx"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"getSolanaSignature"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"createSolanaSignedTx")," \ub97c \uc774\uc6a9\ud574 signed transaction\uc744 \ub9ac\ud134\ud558\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"getSolanaSignedTx"),"\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getSolanaSignedTx.ts"',title:'"getSolanaSignedTx.ts"'},"export const getSolanaSignedTx = async (mnemonic: string) => {\n  /* 1. get rawTransaction */\n  const { serializedTx, unSignedTx } = await getSolanaTx(mnemonic);\n  /* 2. get signature */\n  const solanaSignature = getSolanaSignature(serializedTx);\n  /* 3. create singedTx by combining rawTransaction and signature */\n  const solanaSignedTx = createSolanaSignedTx({\n    unSignedTx,\n    signature: solanaSignature,\n  });\n\n  return solanaSignedTx;\n};\n")),(0,s.kt)("h2",{id:"signed-transaction-\uc804\uc1a1\ud558\uae30"},"Signed transaction \uc804\uc1a1\ud558\uae30"),(0,s.kt)("p",null,"Signed transaction\uc744 \uc0dd\uc131\ud588\ub2e4\uba74, \uadf8\uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="sendSolanaTransaction.ts"',title:'"sendSolanaTransaction.ts"'},"import { Transaction } from '@solana/web3.js';\n\nexport const sendSolanaTransaction = async (serializedTx: string): Promise<Transaction> => {\n  const transaction = Transaction.from(Buffer.from(serializedTx, 'hex'));\n  const rpcUrl = 'https://api.devnet.solana.com';\n\n  const result = await fetch(rpcUrl, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'sendTransaction',\n      params: [\n        transaction.serialize().toString('base64'),\n        { preflightCommitment: 'confirmed', encoding: 'base64' },\n      ],\n      id: 999,\n    }),\n  });\n  const resultJson = await result.json();\n\n  return resultJson.result;\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="main.ts"',title:'"main.ts"'},"const mnemonic = 'sample mnemonic';\nconst main = async () => {\n  const solanaSignedTx = await getSolanaSignedTx(mnemonic);\n  const solanaTxResult = await sendSolanaTransaction(solanaSignedTx);\n  console.log('solana Tx Result : ', solanaTxResult);\n};\nmain();\n")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"\uc544\ub798\uc758 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c\ub85c \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 faucet\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. ",(0,s.kt)("a",{parentName:"p",href:"https://solfaucet.com/"},"\ub2e4\uc74c \ub9c1\ud06c"),"\ub97c \ud1b5\ud574 Solana devnet\uc758 faucet\uc744 \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"\ub2c8\ubaa8\ub2c9\uc774 \uc720\ucd9c\ub420 \uacbd\uc6b0, \uc554\ud638\ud654\ud3d0 \uc790\uc0b0\uc744 \ubaa8\ub450 \uc783\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub97c \uc2e4\ud589\uc2dc\ud0ac \ub54c\uc5d0\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \ud639\uc740 \uac1c\ubc1c\uc6a9 \ub2c8\ubaa8\ub2c9\uc744 \uc0ac\uc6a9\ud574\uc8fc\uc138\uc694.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const [mnemonic, setMnemonic] = React.useState('');\n  const [account, setAccount] = React.useState(null);\n  const [signature, setSignature] = React.useState(null);\n  const [signedTx, setSignedTx] = React.useState(null);\n  const [txResult, setTxResult] = React.useState(null);\n\n  const getSolanaTx = async () => {\n    try {\n      /* 1. get signer */\n      const privateKey = Solana.getPrivateKey({\n        mnemonic,\n        path: { type: CHAIN.SOLANA, account: 0, index: 0 },\n      });\n\n      const signer = Keypair.fromSecretKey(base58.decode(privateKey));\n\n      setAccount(privateKey);\n\n      /* 2. make raw transaction */\n      const connection = new Connection('https://api.devnet.solana.com', 'confirmed'); //allthatnode\n      const toAccountPubKey = new PublicKey('BnBydTNPrTwDz4ZSkhJiGiSZwakPQFVeN8rgdAS2Yc7F'); //allthatnode\n      const RecentBlockHash = await connection.getLatestBlockhash();\n\n      const transaction = new Transaction({\n        /* new blockHash */\n        blockhash: RecentBlockHash.blockhash,\n        lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n        feePayer: signer.publicKey,\n      });\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: signer.publicKey,\n          lamports: Number(0.1) * LAMPORTS_PER_SOL,\n          toPubkey: toAccountPubKey,\n        }),\n      );\n\n      return {\n        serializedTx: `0x${transaction.compileMessage().serialize().toString('hex')}`,\n        unSignedTx: transaction,\n      };\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getSolanaSignature = (serializedTx) => {\n    try {\n      const { signature } = Solana.signTx(\n        {\n          mnemonic,\n          path: { type: CHAIN.SOLANA, account: 0, index: 0 },\n        },\n        serializedTx,\n      );\n      setSignature(signature);\n      return signature;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const createSolanaSignedTx = ({ unSignedTx, signature }) => {\n    try {\n      const bufferSig = Buffer.from(signature.replace('0x', ''), 'hex');\n      unSignedTx.addSignature(unSignedTx.feePayer, bufferSig);\n      const serializedTx = unSignedTx.serialize().toString('hex');\n      return serializedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getSolanaSignedTx = async () => {\n    try {\n      /* 1. get rawTransaction */\n      const { serializedTx, unSignedTx } = await getSolanaTx(mnemonic);\n      /* 2. get signature */\n      const solanaSignature = getSolanaSignature(serializedTx);\n      /* 3. create singedTx by combining rawTransaction and signature */\n      const solanaSignedTx = createSolanaSignedTx({\n        unSignedTx,\n        signature: solanaSignature,\n      });\n      setSignedTx(solanaSignedTx);\n      return solanaSignedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const sendSolanaTransaction = async (solanaSignedTx) => {\n    try {\n      const transaction = Transaction.from(Buffer.from(solanaSignedTx, 'hex'));\n      const rpcUrl = 'https://api.devnet.solana.com';\n\n      const result = await fetch(rpcUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'sendTransaction',\n          params: [\n            transaction.serialize().toString('base64'),\n            { preflightCommitment: 'confirmed', encoding: 'base64' },\n          ],\n          id: 999,\n        }),\n      });\n      const resultJson = await result.json();\n\n      return resultJson.result;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n\n  const handleClick = async () => {\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n    const solanaSignedTx = await getSolanaSignedTx();\n    const solanaTxResult = await sendSolanaTransaction(solanaSignedTx);\n    setTxResult(solanaTxResult);\n  };\n\n  const handleChange = (e) => {\n    setMnemonic(e.target.value);\n\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n  };\n\n  return (\n    <>\n      <Input\n        value={mnemonic}\n        onChange={handleChange}\n        placeholder=\"Your test mnemonic\"\n        style={{ marginRight: '8px' }}\n      />\n      <Button onClick={handleClick} type=\"button\">\n        send transaction\n      </Button>\n      {account && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Private Key:</b> {account}\n        </ResultTooltip>\n      )}\n      {signature && (\n        <ResultTooltip style={{ background: '#F4F4F4', color: 'black' }}>\n          <b>Signature:</b> {signature}\n        </ResultTooltip>\n      )}\n      {signedTx && (\n        <ResultTooltip style={{ background: '#3B48DF' }}>\n          <b>Signed Transaction:</b> {signedTx}\n        </ResultTooltip>\n      )}\n      {txResult && (\n        <ResultTooltip style={{ background: '#FFD400', color: 'black' }}>\n          <b>Transaction Hash:</b> {txResult}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}p.isMDXComponent=!0}}]);