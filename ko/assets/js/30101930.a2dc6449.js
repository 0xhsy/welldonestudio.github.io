"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[9282],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return g}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=c(t),g=a,p=d["".concat(u,".").concat(g)]||d[g]||m[g]||i;return t?r.createElement(p,s(s({ref:n},l),{},{components:t})):r.createElement(p,s({ref:n},l))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7426:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return u},default:function(){return g},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var r=t(83117),a=t(80102),i=(t(67294),t(3905)),s=["components"],o={keywords:["Ethereum sendTransaction","dapp:sendTransaction","Ethereum","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in Ethereum"},u="Ethereum",c={unversionedId:"tutorials/kms/ethereum",id:"tutorials/kms/ethereum",title:"Ethereum",description:"Sending Transactions using @dsrv/kms in Ethereum",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/tutorials/kms/ethereum.md",sourceDirName:"tutorials/kms",slug:"/tutorials/kms/ethereum",permalink:"/ko/tutorials/kms/ethereum",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/kms/ethereum.md",tags:[],version:"current",frontMatter:{keywords:["Ethereum sendTransaction","dapp:sendTransaction","Ethereum","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in Ethereum"},sidebar:"tutorialSidebar",previous:{title:"Cosmos",permalink:"/ko/tutorials/kms/cosmos"},next:{title:"NEAR",permalink:"/ko/tutorials/kms/near"}},l={},m=[{value:"Signed transaction \uc0dd\uc131\ud558\uae30",id:"signed-transaction-\uc0dd\uc131\ud558\uae30",level:2},{value:"1. getEthereumTx",id:"1-getethereumtx",level:3},{value:"2. getEthereumSignature",id:"2-getethereumsignature",level:3},{value:"3. createEthereumSignedTx",id:"3-createethereumsignedtx",level:3},{value:"Signed transaction \uc804\uc1a1\ud558\uae30",id:"signed-transaction-\uc804\uc1a1\ud558\uae30",level:2},{value:"Examples",id:"examples",level:2}],d={toc:m};function g(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ethereum"},"Ethereum"),(0,i.kt)("div",null,(0,i.kt)("span",{className:"author-sm"},"November 11, 2022"),(0,i.kt)("div",{className:"author-div"},(0,i.kt)("div",{className:"author-avatars"},(0,i.kt)("a",{href:"https://github.com/Nahee-Park",target:"_blank"},(0,i.kt)("img",{src:"https://avatars.githubusercontent.com/u/81923229?v=4"}))),(0,i.kt)("div",null,(0,i.kt)("span",{className:"author-name"},"Nahee Park"),(0,i.kt)("br",null),(0,i.kt)("span",{className:"author-sm"},"Software Engineer, DSRV ")))),(0,i.kt)("br",null),(0,i.kt)("admonition",{title:"Prerequisites",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Ethereum \ud30c\ud2b8\uc5d0\uc11c\ub294 ",(0,i.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},"ethers"),"\ub97c \ucd94\uac00\ub85c \uc774\uc6a9\ud558\uc5ec \uc2e4\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud328\ud0a4\uc9c0\ub97c \ubbf8\ub9ac \uc124\uce58\ud574\uc8fc\uc138\uc694.")),(0,i.kt)("h2",{id:"signed-transaction-\uc0dd\uc131\ud558\uae30"},"Signed transaction \uc0dd\uc131\ud558\uae30"),(0,i.kt)("p",null,"signed transaction\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \ud06c\uac8c \uc138 \uac00\uc9c0 \uc808\ucc28\ub97c \uac70\uccd0\uc57c \ud569\ub2c8\ub2e4."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"raw transaction \uc0dd\uc131"),(0,i.kt)("li",{parentName:"ol"},"raw transaction\uc5d0 \ub300\ud55c signature \uc0dd\uc131"),(0,i.kt)("li",{parentName:"ol"},"raw transaction\uacfc signature\uc744 \ud569\uccd0 signed transaction \uc0dd\uc131")),(0,i.kt)("h3",{id:"1-getethereumtx"},"1. getEthereumTx"),(0,i.kt)("p",null,"signed transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 raw transaction\uacfc signature\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. kms\ub97c \ud1b5\ud574 signature\ub97c \uc5bb\uae30 \uc704\ud574\uc120 raw transaction\uc774 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 raw transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c ",(0,i.kt)("inlineCode",{parentName:"p"},"getEthereumTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getEthereumTx.ts"',title:'"getEthereumTx.ts"'},"import { ethers, UnsignedTransaction } from 'ethers';\nimport { Account, CHAIN } from '@dsrv/kms/lib/types';\nimport { Ethereum } from '@dsrv/kms/lib/blockchains/ethereum';\n\ninterface RawTransaction {\n  unSignedTx: UnsignedTransaction;\n  serializedTx: string;\n}\n\nexport const getEthereumTx = async (mnemonic: string): Promise<RawTransaction> => {\n  /* 1. get Account */\n  const account = Ethereum.getAccount({\n    mnemonic,\n    path: { type: CHAIN.ETHEREUM, account: 0, index: 0 },\n  });\n\n  /* 2. make raw transaction */\n  const provider = new ethers.providers.JsonRpcProvider(\n    'https://ethereum-goerli-rpc.allthatnode.com',\n  ); //allthatnode rpc\n  const nonce = await provider.getTransactionCount(account.address);\n  const gasLimit = await provider.estimateGas({\n    value: '0x1',\n    to: account.address,\n  });\n  const transactionParameters = {\n    to: '0x08505F42D5666225d5d73B842dAdB87CCA44d1AE', //allthatnode address\n    value: ethers.utils.parseEther('0.0005'),\n    gasLimit: gasLimit.mul(10).toString(),\n    gasPrice: '0x07f9acf02',\n    type: 2,\n    nonce,\n    // goerli network\n    chainId: 5,\n    // EIP-1559; Type 2\n    maxPriorityFeePerGas: '0x07f9acf02',\n    maxFeePerGas: '0x07f9acf02',\n  };\n\n  return {\n    serializedTx: ethers.utils.serializeTransaction(transactionParameters),\n    unSignedTx: transactionParameters,\n  };\n};\n")),(0,i.kt)("h3",{id:"2-getethereumsignature"},"2. getEthereumSignature"),(0,i.kt)("p",null,"\ub2e4\uc74c\uc73c\ub85c transaction\uc5d0 \ub300\ud55c signature\ub97c \uc5bb\uae30 \uc704\ud574, serializedTx\ub97c \uc778\uc790\ub85c \ubc1b\uc544\uc11c signature\ub97c \uc0dd\uc131\ud558\ub294 ",(0,i.kt)("inlineCode",{parentName:"p"},"getEthereumSignature")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getEthereumSignature.ts"',title:'"getEthereumSignature.ts"'},"import { CHAIN } from '@dsrv/kms/lib/types';\nimport { Ethereum } from '@dsrv/kms/lib/blockchains/ethereum';\n\nexport const getEthereumSignature = (serializedTx: string): string => {\n  const { signature } = Ethereum.signTx(\n    {\n      mnemonic,\n      path: { type: CHAIN.ETHEREUM, account: 0, index: 0 },\n    },\n    serializedTx,\n  );\n\n  return signature;\n};\n")),(0,i.kt)("h3",{id:"3-createethereumsignedtx"},"3. createEthereumSignedTx"),(0,i.kt)("p",null,"\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c ",(0,i.kt)("inlineCode",{parentName:"p"},"unSignedTx"),"\uc640 ",(0,i.kt)("inlineCode",{parentName:"p"},"signature"),"\ub97c \ud1b5\ud574 signed transaction\uc744 \ub9ac\ud134\ud574\uc8fc\ub294 ",(0,i.kt)("inlineCode",{parentName:"p"},"createEthereumSignedTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="createEthereumSignedTx.ts"',title:'"createEthereumSignedTx.ts"'},"import { ethers, UnsignedTransaction } from 'ethers';\n\ninterface createEthereumSignedTxProps {\n  unSignedTx: UnsignedTransaction;\n  signature: string;\n}\n\n/* create singedTx by combining tx and signature */\nexport const createEthereumSignedTx = ({\n  unSignedTx,\n  signature,\n}: createEthereumSignedTxProps): string => {\n  const signedTx = ethers.utils.serializeTransaction(unSignedTx, signature);\n  return signedTx;\n};\n")),(0,i.kt)("p",null,"\ucd5c\uc885\uc801\uc73c\ub85c \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ud568\uc218, ",(0,i.kt)("inlineCode",{parentName:"p"},"getEthereumTx"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"getEthereumSignature"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"createEthereumSignedTx")," \ub97c \uc774\uc6a9\ud574 signed transaction\uc744 \ub9ac\ud134\ud558\ub294 ",(0,i.kt)("inlineCode",{parentName:"p"},"getEthereumSignedTx"),"\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getEthereumSignedTx.ts"',title:'"getEthereumSignedTx.ts"'},"export const getEthereumSignedTx = async (mnemonic: string) => {\n  /* 1. get rawTransaction */\n  const { serializedTx, unSignedTx } = await getEthereumTx(mnemonic);\n  /* 2. get signature */\n  const ethereumSignature = getEthereumSignature(serializedTx);\n  /* 3. create singedTx by combining rawTransaction and signature */\n  const ethereumSignedTx = createEthereumSignedTx({\n    unSignedTx,\n    signature: ethereumSignature,\n  });\n\n  return ethereumSignedTx;\n};\n")),(0,i.kt)("h2",{id:"signed-transaction-\uc804\uc1a1\ud558\uae30"},"Signed transaction \uc804\uc1a1\ud558\uae30"),(0,i.kt)("p",null,"Signed transaction\uc744 \uc0dd\uc131\ud588\ub2e4\uba74, \uadf8\uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="sendEthereumTransaction.ts"',title:'"sendEthereumTransaction.ts"'},"import { Transaction, providers } from 'ethers';\n\nexport const sendEthereumTransaction = async (serializedTx: string): Promise<Transaction> => {\n  const provider = new providers.JsonRpcProvider('https://ethereum-goerli-rpc.allthatnode.com');\n\n  const result = await provider.sendTransaction(serializedTx);\n  return result;\n};\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="main.ts"',title:'"main.ts"'},"const mnemonic = 'sample mnemonic';\nconst main = async () => {\n  const ethereumSignedTx = await getEthereumSignedTx(mnemonic);\n  const ethereumTxResult = await sendEthereumTransaction(ethereumSignedTx);\n  console.log('Ethereum Tx Result : ', ethereumTxResult);\n};\nmain();\n")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("p",null,"\uc544\ub798\uc758 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c\ub85c \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 faucet\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. ",(0,i.kt)("a",{parentName:"p",href:"https://www.allthatnode.com/faucet/ethereum.dsrv"},"\ub2e4\uc74c \ub9c1\ud06c"),"\ub97c \ud1b5\ud574 Ethereum Goerli \ud14c\uc2a4\ud2b8\ub137\uc758 faucet\uc744 \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"\ub2c8\ubaa8\ub2c9\uc774 \uc720\ucd9c\ub420 \uacbd\uc6b0, \uc554\ud638\ud654\ud3d0 \uc790\uc0b0\uc744 \ubaa8\ub450 \uc783\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub97c \uc2e4\ud589\uc2dc\ud0ac \ub54c\uc5d0\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \ud639\uc740 \uac1c\ubc1c\uc6a9 \ub2c8\ubaa8\ub2c9\uc744 \uc0ac\uc6a9\ud574\uc8fc\uc138\uc694.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const [mnemonic, setMnemonic] = React.useState('');\n  const [account, setAccount] = React.useState(null);\n  const [signature, setSignature] = React.useState(null);\n  const [signedTx, setSignedTx] = React.useState(null);\n  const [txResult, setTxResult] = React.useState(null);\n\n  const getEthereumTx = async () => {\n    try {\n      /* 1. get Account */\n      const account = Ethereum.getAccount({\n        mnemonic,\n        path: { type: CHAIN.ETHEREUM, account: 0, index: 0 },\n      });\n      setAccount(account.address);\n\n      /* 2. make raw transaction */\n      const provider = new ethers.providers.JsonRpcProvider(\n        'https://ethereum-goerli-rpc.allthatnode.com',\n      ); //allthatnode rpc\n      const nonce = await provider.getTransactionCount(account.address);\n      const gasLimit = await provider.estimateGas({\n        value: '0x1',\n        to: account.address,\n      });\n      const transactionParameters = {\n        to: '0x08505F42D5666225d5d73B842dAdB87CCA44d1AE', //allthatnode address\n        value: ethers.utils.parseEther('0.0005'),\n        gasLimit: gasLimit.mul(10).toString(),\n        gasPrice: '0x07f9acf02',\n        type: 2,\n        nonce,\n        // goerli network\n        chainId: 5,\n        // EIP-1559; Type 2\n        maxPriorityFeePerGas: '0x07f9acf02',\n        maxFeePerGas: '0x07f9acf02',\n      };\n\n      return {\n        serializedTx: ethers.utils.serializeTransaction(transactionParameters),\n        unSignedTx: transactionParameters,\n      };\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getEthereumSignature = (serializedTx) => {\n    try {\n      const { signature } = Ethereum.signTx(\n        {\n          mnemonic,\n          path: { type: CHAIN.ETHEREUM, account: 0, index: 0 },\n        },\n        serializedTx,\n      );\n      setSignature(signature);\n      return signature;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const createEthereumSignedTx = ({ unSignedTx, signature }) => {\n    try {\n      const signedTx = ethers.utils.serializeTransaction(unSignedTx, signature);\n      return signedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getEthereumSignedTx = async () => {\n    try {\n      /* 1. get rawTransaction */\n      const { serializedTx, unSignedTx } = await getEthereumTx();\n      /* 2. get signature */\n      const ethereumSignature = getEthereumSignature(serializedTx);\n      /* 3. create singedTx by combining rawTransaction and signature */\n      const ethereumSignedTx = createEthereumSignedTx({\n        unSignedTx,\n        signature: ethereumSignature,\n      });\n      setSignedTx(ethereumSignedTx);\n      return ethereumSignedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const sendEthereumTransaction = async (ethereumSignedTx) => {\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\n        'https://ethereum-goerli-rpc.allthatnode.com',\n      );\n      const tx = await provider.sendTransaction(ethereumSignedTx);\n      const result = await tx.wait();\n      return result;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n\n  const handleClick = async () => {\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n    const ethereumSignedTx = await getEthereumSignedTx();\n    const ethereumTxResult = await sendEthereumTransaction(ethereumSignedTx);\n    setTxResult(ethereumTxResult);\n  };\n\n  const handleChange = (e) => {\n    setMnemonic(e.target.value);\n\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n  };\n\n  return (\n    <>\n      <Input\n        value={mnemonic}\n        onChange={handleChange}\n        placeholder=\"Your test mnemonic\"\n        style={{ marginRight: '8px' }}\n      />\n      <Button onClick={handleClick} type=\"button\">\n        send transaction\n      </Button>\n      {account && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Account:</b> {account}\n        </ResultTooltip>\n      )}\n      {signature && (\n        <ResultTooltip style={{ background: '#F4F4F4', color: 'black' }}>\n          <b>Signature:</b> {signature}\n        </ResultTooltip>\n      )}\n      {signedTx && (\n        <ResultTooltip style={{ background: '#3B48DF' }}>\n          <b>Signed Transaction:</b> {signedTx}\n        </ResultTooltip>\n      )}\n      {txResult && (\n        <ResultTooltip style={{ background: '#FFD400', color: 'black' }}>\n          <b>Transaction Hash:</b> {txResult.transactionHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}g.isMDXComponent=!0}}]);