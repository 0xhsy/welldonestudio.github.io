"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[653],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function s(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){s(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,s=function(n,e){if(null==n)return{};var t,r,s={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(s[t]=n[t]);return s}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(s[t]=n[t])}return s}var c=r.createContext({}),u=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},l=function(n){var e=u(n.components);return r.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,s=n.mdxType,a=n.originalType,c=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),p=u(t),m=s,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(g,o(o({ref:e},l),{},{components:t})):r.createElement(g,o({ref:e},l))}));function m(n,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof n||s){var a=t.length,o=new Array(a);o[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:s,o[1]=i;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},72414:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var r=t(83117),s=t(80102),a=(t(67294),t(3905)),o=["components"],i={keywords:["Sui sendTransaction","dapp:signAndSendTransaction","Sui","\uc218\uc774","\uc218\uc774 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1"],description:"Sending Transactions in Sui, Sui\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30"},c="Sui",u={unversionedId:"wallet/developer-guide/sending-transaction/sui",id:"wallet/developer-guide/sending-transaction/sui",title:"Sui",description:"Sending Transactions in Sui, Sui\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/wallet/developer-guide/sending-transaction/sui.md",sourceDirName:"wallet/developer-guide/sending-transaction",slug:"/wallet/developer-guide/sending-transaction/sui",permalink:"/ko/wallet/developer-guide/sending-transaction/sui",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/developer-guide/sending-transaction/sui.md",tags:[],version:"current",frontMatter:{keywords:["Sui sendTransaction","dapp:signAndSendTransaction","Sui","\uc218\uc774","\uc218\uc774 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1"],description:"Sending Transactions in Sui, Sui\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30"},sidebar:"tutorialSidebar",previous:{title:"Solana",permalink:"/ko/wallet/developer-guide/sending-transaction/solana"},next:{title:"Execute the Contract",permalink:"/ko/execute-the-contract"}},l={},d=[{value:"1. Returns",id:"1-returns",level:2},{value:"2. Params",id:"2-params",level:2},{value:"3. Example",id:"3-example",level:2}],p={toc:d};function m(n){var e=n.components,t=(0,s.Z)(n,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sui"},"Sui"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"\uc774 \ud30c\ud2b8\uc5d0\uc11c\ub294 Sui \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1\uc744 ",(0,a.kt)("inlineCode",{parentName:"p"},"dapp.request"),"\ub97c \ud1b5\ud574 \uc2dc\uc791\ud558\ub294 \ubc29\uc2dd\uc744 \uc18c\uac1c\ud569\ub2c8\ub2e4. \uc774 API\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub192\uc740 \uc218\uc900\uc758 \ucd94\uc0c1\ud654\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 \uacf5\uae09\uc790\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0, \ud3b8\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. WELLDONE Wallet\uc740 dapp \uba54\uc18c\ub4dc\uc758 \ud3b8\ub9ac\ud55c \uc0ac\uc6a9\uc744 \uc704\ud55c \ubc29\ubc95\uc744 \uac15\uad6c \uc911\uc785\ub2c8\ub2e4.")),(0,a.kt)("p",null,"Sui \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc11c\ub294 \ub2e4\uc74c\uc758 \uacfc\uc815\uc774 \uba3c\uc800 \ud544\uc694\ud569\ub2c8\ub2e4."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Universal Provider (",(0,a.kt)("inlineCode",{parentName:"li"},"window.dapp"),") \uac10\uc9c0"),(0,a.kt)("li",{parentName:"ol"},"\uc0ac\uc6a9\uc790\uac00 \uc5f0\uacb0\ub41c Sui \ub124\ud2b8\uc6cc\ud06c \uac10\uc9c0"),(0,a.kt)("li",{parentName:"ol"},"\uc0ac\uc6a9\uc790\uc758 Sui \uacc4\uc815 \uac00\uc838\uc624\uae30")),(0,a.kt)("p",null,"WELLDONE Wallet\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc9c0\uac11 \uc8fc\uc18c\uc5d0 \uc5f0\uacb0\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uc5ec \uac00\uc838\uc635\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc774\uc804\uc5d0 \uba54\uc778\ub137\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0bc \uac83\uc778\uc9c0, \ud14c\uc2a4\ud2b8\ub137\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0bc \uac83\uc778\uc9c0 \ubbf8\ub9ac \uace0\ub824\ud574\ub450\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc740 \uc544\ub798\uc640 \uac19\uc740 \ud3ec\ub9f7\uc744 \ud1b5\ud574 \uc804\uc1a1\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const response = await dapp.request('sui', {\n  method: 'dapp:signAndSendTransaction',\n  params: [HEX_STRING_TX_DATA],\n});\n")),(0,a.kt)("h2",{id:"1-returns"},"1. Returns"),(0,a.kt)("p",null,"\ud574\ub2f9 \uba54\uc18c\ub4dc\ub294 \ub2e8\uc77c \ud2b8\ub79c\uc7ad\uc158 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5ec\ub7ec \uac1c\uc758 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0, \ud2b8\ub79c\uc7ad\uc158 \ud574\uc2dc \uac12\uc744 string \ud0c0\uc785\uc758 ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," \ubc30\uc5f4\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string[]>;\n")),(0,a.kt)("h2",{id:"2-params"},"2. Params"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"type HEX_STRING_TX_DATA = string;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Sui\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 ",(0,a.kt)("inlineCode",{parentName:"li"},"HEX_STRING_TX_DATA"),"\uc744 params\ub85c \ub118\uaca8\uc57c \ud569\ub2c8\ub2e4. \ud574\ub2f9 \uac12\uc740 ",(0,a.kt)("inlineCode",{parentName:"li"},"@mysten/sui.js")," \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud1b5\ud574 \uc5bb\uc744 \uc218 \uc788\uc73c\uba70, \uc790\uc138\ud55c \uc0ac\uc6a9 \ubc29\uc2dd\uc740 ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/MystenLabs/sui"},"\uacf5\uc2dd \ubb38\uc11c"),"\uc640 \uc544\ub798\uc758 \uc608\uc2dc\ub97c \ud1b5\ud574 \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.")),(0,a.kt)("h2",{id:"3-example"},"3. Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { TransactionBlock } from '@mysten/sui.js';\nconst CHAIN_NAME = 'sui';\nconst SUI_RPC_URL = 'https://wallet-rpc.devnet.sui.io/';\n\nconst request = async (method, params) => {\n  const res = await fetch(SUI_RPC_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      id: 0,\n      jsonrpc: '2.0',\n      method,\n      params: params || [],\n    }),\n  });\n\n  const { result } = await res.json();\n  return result;\n};\n\nconst getSerializedTransaction = async (accounts) => {\n  try {\n    /*\n      This is an example of a sui provider\n      Production development should use JsonRpcProvider from @mysten/sui.js\n      https://github.com/MystenLabs/sui/tree/main/sdk/typescript#writing-apis\n    */\n    const suiProvider = {\n      provider: {\n        getReferenceGasPrice: async () => {\n          const result = await request('suix_getReferenceGasPrice', []);\n          return result;\n        },\n        getCoins: async ({ owner, coinType }) => {\n          const result = await request('suix_getCoins', [owner, coinType]);\n          return result;\n        },\n        multiGetObjects: async ({ ids, options }) => {\n          const result = await request('sui_multiGetObjects', [ids, options]);\n          return result;\n        },\n        dryRunTransactionBlock: async ({ transactionBlock }) => {\n          const result = await request('sui_dryRunTransactionBlock', [\n            typeof transactionBlock === 'string'\n              ? transactionBlock\n              : Buffer.from(transactionBlock).toString('base64'),\n          ]);\n          return result;\n        },\n      },\n    };\n\n    const coins = await request('suix_getCoins', [accounts.address]);\n\n    const coinType = '0x2::sui::SUI';\n    const filtered = coins.data.filter((item) => item.coinType === coinType);\n\n    const txb = new TransactionBlock();\n    txb.setSender(accounts.address);\n\n    txb.setGasPayment(\n      filtered.map((item) => {\n        return {\n          objectId: item.coinObjectId,\n          version: item.version,\n          digest: item.digest,\n        };\n      }),\n    );\n    const [coin] = txb.splitCoins(txb.gas, [txb.pure(10000000)]);\n\n    txb.transferObjects([coin], txb.pure(accounts.address));\n    const transactionBlock = await txb.build(suiProvider);\n    return `0x${Buffer.from(transactionBlock).toString('hex')}`;\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nasync function sendTransaction() {\n  try {\n    const HEX_STRING_TX_DATA = await getSerializedTransaction();\n    const response = await dapp.request(CHAIN_NAME, {\n      method: 'dapp:signAndSendTransaction',\n      params: [`${HEX_STRING_TX_DATA}`],\n    });\n    const txHash = response[0];\n\n    setTxHash(txHash);\n  } catch (error) {\n    alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n  }\n}\n\nconst sendTransaction = async () => {\n  // get accounts first\n  const accounts = await dapp.request(CHAIN_NAME, { method: 'dapp:accounts' });\n  const HEX_STRING_TX_DATA = await getSerializedTransaction(accounts[CHAIN_NAME]);\n  // sending a transaction\n  try {\n    const response = await dapp.request(CHAIN_NAME, {\n      method: 'dapp:signAndSendTransaction',\n      params: [\n        // use serialized transaction\n        [`${HEX_STRING_TX_DATA}`],\n      ],\n    });\n    const txHash = response[0];\n  } catch (error) {\n    /*\n        {\n          message: 'User denied transaction signature',\n          code: 4001,\n        }\n      */\n  }\n};\n")),(0,a.kt)("p",null,"\uc544\ub798\uc758 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c\ub85c \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc608\uc81c\ub97c \ud1b5\ud574 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 Sui \uacc4\uc815\uacfc devnet \ud1a0\ud070\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc9c0\uac11 \ub0b4\uc758 FAUCET \ud0ed\uc5d0\uc11c faucet\uc744 \uc694\uccad\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'sui';\n  const SUI_RPC_URL = 'https://wallet-rpc.devnet.sui.io/';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n\n  const request = async (method, params) => {\n    const res = await fetch(SUI_RPC_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: 0,\n        jsonrpc: '2.0',\n        method,\n        params: params || [],\n      }),\n    });\n\n    const { result } = await res.json();\n    return result;\n  };\n\n  /*\n    This is an example of a sui provider\n    Production development should use JsonRpcProvider from @mysten/sui.js\n    https://github.com/MystenLabs/sui/tree/main/sdk/typescript#writing-apis\n  */\n  const suiProvider = {\n    provider: {\n      getReferenceGasPrice: async () => {\n        const result = await request('suix_getReferenceGasPrice', []);\n        return result;\n      },\n      getCoins: async ({ owner, coinType }) => {\n        const result = await request('suix_getCoins', [owner, coinType]);\n        return result;\n      },\n      multiGetObjects: async ({ ids, options }) => {\n        const result = await request('sui_multiGetObjects', [ids, options]);\n        return result;\n      },\n      dryRunTransactionBlock: async ({ transactionBlock }) => {\n        const result = await request('sui_dryRunTransactionBlock', [\n          typeof transactionBlock === 'string'\n            ? transactionBlock\n            : Buffer.from(transactionBlock).toString('base64'),\n        ]);\n        return result;\n      },\n    },\n  };\n\n  const getSerializedTransaction = async () => {\n    try {\n      const coins = await request('suix_getCoins', [accounts.address]);\n\n      const coinType = '0x2::sui::SUI';\n      const filtered = coins.data.filter((item) => item.coinType === coinType);\n\n      const txb = new TransactionBlock();\n      txb.setSender(accounts.address);\n\n      txb.setGasPayment(\n        filtered.map((item) => {\n          return {\n            objectId: item.coinObjectId,\n            version: item.version,\n            digest: item.digest,\n          };\n        }),\n      );\n      const [coin] = txb.splitCoins(txb.gas, [txb.pure(10000000)]);\n\n      txb.transferObjects([coin], txb.pure(accounts.address));\n      const transactionBlock = await txb.build(suiProvider);\n      return `0x${Buffer.from(transactionBlock).toString('hex')}`;\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n      if (Object.keys(accounts).length === 0) {\n        throw new Error('There is no accounts.');\n      }\n      const chainId = await window.dapp.networks.sui.chain;\n\n      if ((chainId === 'mainnet') | (chainId === 'testnet')) {\n        throw new Error('Please chagne to SUI devnet in WELLDONE Wallet');\n      }\n      setAccounts(accounts[CHAIN_NAME]);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n  async function handleSendTransaction() {\n    try {\n      const HEX_STRING_TX_DATA = await getSerializedTransaction();\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:signAndSendTransaction',\n        params: [`${HEX_STRING_TX_DATA}`],\n      });\n      const txHash = response[0];\n\n      setTxHash(txHash);\n    } catch (error) {\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);