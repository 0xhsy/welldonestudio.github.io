"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[1335],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return p}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},u=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,s=n.originalType,c=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),g=l(t),p=r,m=g["".concat(c,".").concat(p)]||g[p]||d[p]||s;return t?a.createElement(m,o(o({ref:e},u),{},{components:t})):a.createElement(m,o({ref:e},u))}));function p(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=t.length,o=new Array(s);o[0]=g;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:r,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},32658:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var a=t(83117),r=t(80102),s=(t(67294),t(3905)),o=["components"],i={keywords:["celo sendTransaction","dapp:sendTransaction","celo","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in Celo"},c="Celo",l={unversionedId:"tutorials/kms/celo",id:"tutorials/kms/celo",title:"Celo",description:"Sending Transactions using @dsrv/kms in Celo",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/tutorials/kms/celo.md",sourceDirName:"tutorials/kms",slug:"/tutorials/kms/celo",permalink:"/ko/tutorials/kms/celo",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/kms/celo.md",tags:[],version:"current",frontMatter:{keywords:["celo sendTransaction","dapp:sendTransaction","celo","kms","@dsrv/kms"],description:"Sending Transactions using @dsrv/kms in Celo"},sidebar:"tutorialSidebar",previous:{title:"Aptos",permalink:"/ko/tutorials/kms/aptos"},next:{title:"Cosmos",permalink:"/ko/tutorials/kms/cosmos"}},u={},d=[{value:"Signed transaction \uc0dd\uc131\ud558\uae30",id:"signed-transaction-\uc0dd\uc131\ud558\uae30",level:2},{value:"1. getCeloTx",id:"1-getcelotx",level:3},{value:"2. getCeloSignature",id:"2-getcelosignature",level:3},{value:"3. createCeloSignedTx",id:"3-createcelosignedtx",level:3},{value:"Signed transaction \uc804\uc1a1\ud558\uae30",id:"signed-transaction-\uc804\uc1a1\ud558\uae30",level:2},{value:"Examples",id:"examples",level:2}],g={toc:d};function p(n){var e=n.components,t=(0,r.Z)(n,o);return(0,s.kt)("wrapper",(0,a.Z)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"celo"},"Celo"),(0,s.kt)("div",null,(0,s.kt)("span",{className:"author-sm"},"November 11, 2022"),(0,s.kt)("div",{className:"author-div"},(0,s.kt)("div",{className:"author-avatars"},(0,s.kt)("a",{href:"https://github.com/Nahee-Park",target:"_blank"},(0,s.kt)("img",{src:"https://avatars.githubusercontent.com/u/81923229?v=4"}))),(0,s.kt)("div",null,(0,s.kt)("span",{className:"author-name"},"Nahee Park"),(0,s.kt)("br",null),(0,s.kt)("span",{className:"author-sm"},"Software Engineer, DSRV ")))),(0,s.kt)("br",null),(0,s.kt)("admonition",{title:"Prerequisites",type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"Celo \ud30c\ud2b8\uc5d0\uc11c\ub294 ",(0,s.kt)("a",{parentName:"p",href:"https://docs.ethers.io/v5/"},"ethers"),"\ub97c \ucd94\uac00\ub85c \uc774\uc6a9\ud558\uc5ec \uc2e4\uc2b5\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4. \ud574\ub2f9 \ud328\ud0a4\uc9c0\ub97c \ubbf8\ub9ac \uc124\uce58\ud574\uc8fc\uc138\uc694.")),(0,s.kt)("h2",{id:"signed-transaction-\uc0dd\uc131\ud558\uae30"},"Signed transaction \uc0dd\uc131\ud558\uae30"),(0,s.kt)("p",null,"signed transaction\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \ud06c\uac8c \uc138 \uac00\uc9c0 \uc808\ucc28\ub97c \uac70\uccd0\uc57c \ud569\ub2c8\ub2e4."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"raw transaction \uc0dd\uc131"),(0,s.kt)("li",{parentName:"ol"},"raw transaction\uc5d0 \ub300\ud55c signature \uc0dd\uc131"),(0,s.kt)("li",{parentName:"ol"},"raw transaction\uacfc signature\uc744 \ud569\uccd0 signed transaction \uc0dd\uc131")),(0,s.kt)("h3",{id:"1-getcelotx"},"1. getCeloTx"),(0,s.kt)("p",null,"signed transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 raw transaction\uacfc signature\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. kms\ub97c \ud1b5\ud574 signature\ub97c \uc5bb\uae30 \uc704\ud574\uc120 raw transaction\uc774 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 \uba3c\uc800 raw transaction\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c ",(0,s.kt)("inlineCode",{parentName:"p"},"getCeloTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getCeloTx.ts"',title:'"getCeloTx.ts"'},"import { ethers, UnsignedTransaction } from 'ethers';\nimport { Account, CHAIN } from '@dsrv/kms/lib/types';\nimport { Ethereum } from '@dsrv/kms/lib/blockchains/ethereum';\n\ninterface RawTransaction {\n  unSignedTx: UnsignedTransaction;\n  serializedTx: string;\n}\n\nexport const getCeloTx = async (mnemonic: string): Promise<RawTransaction> => {\n  /* 1. get Account */\n  const account = Ethereum.getAccount({\n    mnemonic,\n    path: { type: CHAIN.CELO, account: 0, index: 0 },\n  });\n\n  /* 2. make raw transaction */\n  const provider = new ethers.providers.JsonRpcProvider(\n    'https://celo-alfajores-rpc.allthatnode.com',\n  ); //allthatnode rpc\n  const nonce = await provider.getTransactionCount(account.address);\n  const gasLimit = await provider.estimateGas({\n    value: '0x1',\n    to: account.address, // send to yourself\n    from: account.address,\n  });\n  const transactionParameters = {\n    to: account.address, // send to yourself\n    value: ethers.utils.parseEther('0.0005'),\n    gasLimit: gasLimit.mul(10).toString(),\n    gasPrice: '0x07f9acf02',\n    type: 2,\n    nonce,\n    // alfajores network\n    chainId: 44787,\n    type: 1,\n    gasPrice: '0x07f9acf02',\n    maxPriorityFeePerGas: '0x07f9acf02',\n    maxFeePerGas: '0x07f9acf02',\n    nonce,\n  };\n\n  return {\n    serializedTx: ethers.utils.serializeTransaction(transactionParameters),\n    unSignedTx: transactionParameters,\n  };\n};\n")),(0,s.kt)("h3",{id:"2-getcelosignature"},"2. getCeloSignature"),(0,s.kt)("p",null,"\ub2e4\uc74c\uc73c\ub85c transaction\uc5d0 \ub300\ud55c signature\ub97c \uc5bb\uae30 \uc704\ud574, serializedTx\ub97c \uc778\uc790\ub85c \ubc1b\uc544\uc11c signature\ub97c \uc0dd\uc131\ud558\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"getCeloSignature")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getCeloSignature.ts"',title:'"getCeloSignature.ts"'},"import { CHAIN } from '@dsrv/kms/lib/types';\nimport { Ethereum } from '@dsrv/kms/lib/blockchains/ethereum';\n\nexport const getCeloSignature = (serializedTx: string): string => {\n  const { signature } = Ethereum.signTx(\n    {\n      mnemonic,\n      path: { type: CHAIN.CELO, account: 0, index: 0 },\n    },\n    serializedTx,\n  );\n\n  return signature;\n};\n")),(0,s.kt)("h3",{id:"3-createcelosignedtx"},"3. createCeloSignedTx"),(0,s.kt)("p",null,"\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc704\uc5d0\uc11c \uc0dd\uc131\ud55c ",(0,s.kt)("inlineCode",{parentName:"p"},"unSignedTx"),"\uc640 ",(0,s.kt)("inlineCode",{parentName:"p"},"signature"),"\ub97c \ud1b5\ud574 signed transaction\uc744 \ub9ac\ud134\ud574\uc8fc\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"createCeloSignedTx")," \ud568\uc218\ub97c \ub9cc\ub4ed\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="createCeloSignedTx.ts"',title:'"createCeloSignedTx.ts"'},"import { ethers, UnsignedTransaction } from 'ethers';\n\ninterface createCeloSignedTxProps {\n  unSignedTx: UnsignedTransaction;\n  signature: string;\n}\n\n/* create singedTx by combining tx and signature */\nexport const createCeloSignedTx = ({ unSignedTx, signature }: createCeloSignedTxProps): string => {\n  const signedTx = ethers.utils.serializeTransaction(unSignedTx, signature);\n  return signedTx;\n};\n")),(0,s.kt)("p",null,"\ucd5c\uc885\uc801\uc73c\ub85c \uc704\uc5d0\uc11c \ub9cc\ub4e0 \ud568\uc218, ",(0,s.kt)("inlineCode",{parentName:"p"},"getCeloTx"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"getCeloSignature"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"createCeloSignedTx")," \ub97c \uc774\uc6a9\ud574 signed transaction\uc744 \ub9ac\ud134\ud558\ub294 ",(0,s.kt)("inlineCode",{parentName:"p"},"getCeloSignedTx"),"\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="getCeloSignedTx.ts"',title:'"getCeloSignedTx.ts"'},"export const getCeloSignedTx = async (mnemonic: string) => {\n  /* 1. get rawTransaction */\n  const { serializedTx, unSignedTx } = await getCeloTx(mnemonic);\n  /* 2. get signature */\n  const celoSignature = getCeloSignature(serializedTx);\n  /* 3. create singedTx by combining rawTransaction and signature */\n  const celoSignedTx = createCeloSignedTx({\n    unSignedTx,\n    signature: celoSignature,\n  });\n\n  return celoSignedTx;\n};\n")),(0,s.kt)("h2",{id:"signed-transaction-\uc804\uc1a1\ud558\uae30"},"Signed transaction \uc804\uc1a1\ud558\uae30"),(0,s.kt)("p",null,"Signed transaction\uc744 \uc0dd\uc131\ud588\ub2e4\uba74, \uadf8\uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="sendCeloTransaction.ts"',title:'"sendCeloTransaction.ts"'},"import { Transaction, providers } from 'ethers';\n\nexport const sendCeloTransaction = async (serializedTx: string): Promise<Transaction> => {\n  const provider = new providers.JsonRpcProvider('https://celo-alfajores-rpc.allthatnode.com');\n\n  const result = await provider.sendTransaction(serializedTx);\n  return result;\n};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="main.ts"',title:'"main.ts"'},"const mnemonic = 'sample mnemonic';\nconst main = async () => {\n  const celoSignedTx = await getCeloSignedTx(mnemonic);\n  const celoTxResult = await sendCeloTransaction(celoSignedTx);\n  console.log('Celo Tx Result : ', celoTxResult);\n};\nmain();\n")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"\uc544\ub798\uc758 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c\ub85c \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 \ud14c\uc2a4\ud2b8\ub137 \ud1a0\ud070\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc9c0\uac11 \ub0b4\uc758 FAUCET \ud0ed\uc5d0\uc11c faucet\uc744 \uc694\uccad\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,s.kt)("admonition",{type:"warning"},(0,s.kt)("p",{parentName:"admonition"},"\ub2c8\ubaa8\ub2c9\uc774 \uc720\ucd9c\ub420 \uacbd\uc6b0, \uc554\ud638\ud654\ud3d0 \uc790\uc0b0\uc744 \ubaa8\ub450 \uc783\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uc608\uc81c\ub97c \uc2e4\ud589\uc2dc\ud0ac \ub54c\uc5d0\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \ud639\uc740 \uac1c\ubc1c\uc6a9 \ub2c8\ubaa8\ub2c9\uc744 \uc0ac\uc6a9\ud574\uc8fc\uc138\uc694.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const [mnemonic, setMnemonic] = React.useState('');\n  const [account, setAccount] = React.useState(null);\n  const [signature, setSignature] = React.useState(null);\n  const [signedTx, setSignedTx] = React.useState(null);\n  const [txResult, setTxResult] = React.useState(null);\n\n  const getCeloTx = async () => {\n    try {\n      /* 1. get Account */\n      const account = Ethereum.getAccount({\n        mnemonic,\n        path: { type: CHAIN.CELO, account: 0, index: 0 },\n      });\n      setAccount(account.address);\n\n      /* 2. make raw transaction */\n      const provider = new ethers.providers.JsonRpcProvider(\n        'https://celo-alfajores-rpc.allthatnode.com',\n      ); //allthatnode rpc\n      const nonce = await provider.getTransactionCount(account.address);\n      const gasLimit = await provider.estimateGas({\n        value: '0x1',\n        to: account.address, // send to yourself\n        from: account.address,\n      });\n      const transactionParameters = {\n        to: account.address, // send to yourself\n        value: ethers.utils.parseEther('0.0005'),\n        gasLimit: gasLimit.mul(10).toString(),\n        gasPrice: '0x07f9acf02',\n        type: 2,\n        nonce,\n        // alfajores network\n        chainId: 44787,\n        type: 1,\n        gasPrice: '0x07f9acf02',\n        maxPriorityFeePerGas: '0x07f9acf02',\n        maxFeePerGas: '0x07f9acf02',\n        nonce,\n      };\n\n      return {\n        serializedTx: ethers.utils.serializeTransaction(transactionParameters),\n        unSignedTx: transactionParameters,\n      };\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getCeloSignature = (serializedTx) => {\n    try {\n      const { signature } = Ethereum.signTx(\n        {\n          mnemonic,\n          path: { type: CHAIN.CELO, account: 0, index: 0 },\n        },\n        serializedTx,\n      );\n      setSignature(signature);\n      return signature;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const createCeloSignedTx = ({ unSignedTx, signature }) => {\n    try {\n      const signedTx = ethers.utils.serializeTransaction(unSignedTx, signature);\n      return signedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const getCeloSignedTx = async () => {\n    try {\n      /* 1. get rawTransaction */\n      const { serializedTx, unSignedTx } = await getCeloTx();\n      /* 2. get signature */\n      const celoSignature = getCeloSignature(serializedTx);\n      /* 3. create singedTx by combining rawTransaction and signature */\n      const celoSignedTx = createCeloSignedTx({\n        unSignedTx,\n        signature: celoSignature,\n      });\n      setSignedTx(celoSignedTx);\n      return celoSignedTx;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n  const sendCeloTransaction = async (celoSignedTx) => {\n    try {\n      const provider = new ethers.providers.JsonRpcProvider(\n        'https://celo-alfajores-rpc.allthatnode.com',\n      );\n\n      const tx = await provider.sendTransaction(celoSignedTx);\n      const result = await tx.wait();\n      return result;\n    } catch (e) {\n      alert(`error : ${e.message}`);\n    }\n  };\n\n  const handleClick = async () => {\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n    const celoSignedTx = await getCeloSignedTx();\n    const celoTxResult = await sendCeloTransaction(celoSignedTx);\n    setTxResult(celoTxResult);\n  };\n\n  const handleChange = (e) => {\n    setMnemonic(e.target.value);\n\n    account && setAccount(null);\n    signature && setSignature(null);\n    signedTx && setSignedTx(null);\n    txResult && setTxResult(null);\n  };\n\n  return (\n    <>\n      <Input\n        value={mnemonic}\n        onChange={handleChange}\n        placeholder=\"Your test mnemonic\"\n        style={{ marginRight: '8px' }}\n      />\n      <Button onClick={handleClick} type=\"button\">\n        send transaction\n      </Button>\n      {account && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Account:</b> {account}\n        </ResultTooltip>\n      )}\n      {signature && (\n        <ResultTooltip style={{ background: '#F4F4F4', color: 'black' }}>\n          <b>Signature:</b> {signature}\n        </ResultTooltip>\n      )}\n      {signedTx && (\n        <ResultTooltip style={{ background: '#3B48DF' }}>\n          <b>Signed Transaction:</b> {signedTx}\n        </ResultTooltip>\n      )}\n      {txResult && (\n        <ResultTooltip style={{ background: '#FFD400', color: 'black' }}>\n          <b>Transaction Hash:</b> {txResult.transactionHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}p.isMDXComponent=!0}}]);