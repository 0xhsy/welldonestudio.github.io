"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[5141],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||l[m]||o;return t?r.createElement(h,i(i({ref:n},u),{},{components:t})):r.createElement(h,i({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},33743:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return l}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),i=["components"],c={title:"SUI Game Example",description:"Learning about how to build a game in Sui"},s="Build a Game on Sui with VRF and Dynamic NFTs",p={unversionedId:"tutorials/sui-game/index",id:"tutorials/sui-game/index",title:"SUI Game Example",description:"Learning about how to build a game in Sui",source:"@site/docs/tutorials/sui-game/index.md",sourceDirName:"tutorials/sui-game",slug:"/tutorials/sui-game/",permalink:"/ko/tutorials/sui-game/",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/sui-game/index.md",tags:[],version:"current",frontMatter:{title:"SUI Game Example",description:"Learning about how to build a game in Sui"},sidebar:"tutorialSidebar",previous:{title:"How to Migrate the Contract",permalink:"/ko/tutorials/near-ecosystem/migrate-contract"},next:{title:"AboutUs",permalink:"/ko/aboutus"}},u={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Code Tutorials",id:"code-tutorials",level:2},{value:"Smart Contract: Weapon Struct",id:"smart-contract-weapon-struct",level:3},{value:"Smart Contract: Ownership",id:"smart-contract-ownership",level:3},{value:"Smart Contract: Create Weapon",id:"smart-contract-create-weapon",level:3},{value:"Smart Contract: Request Updating Weapon",id:"smart-contract-request-updating-weapon",level:3},{value:"Smart Contract: Update Weapon",id:"smart-contract-update-weapon",level:3},{value:"Deploy Smart Contract with Welldone Code",id:"deploy-smart-contract-with-welldone-code",level:2},{value:"New Project",id:"new-project",level:3},{value:"Source Code",id:"source-code",level:3},{value:"Compile The Source Code",id:"compile-the-source-code",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Check Out Deployed Contract",id:"check-out-deployed-contract",level:3},{value:"Calling Contract Functions",id:"calling-contract-functions",level:3},{value:"Reference",id:"reference",level:3}],d={toc:l};function m(e){var n=e.components,c=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,c,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build-a-game-on-sui-with-vrf-and-dynamic-nfts"},"Build a Game on Sui with VRF and Dynamic NFTs"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Here is a educational game prototype that can be fast, scalable and transparent with mutable, fully on-chain NFTs and verifiable random. Sui has a lot of unique features. Sui\u2019s unique language, Move\xa0is awesome: It\u2019s safe, efficient for blockchain and resistant to vulnerabilities such as reentrancy. But without move expertise, here's an easy way to create a game on Sui, with a web IDE that doesn't require any development setup. And let's take a look at how Sui's unique features, such as dynamic NFTs and VRF, can enhance the gaming experience."),(0,o.kt)("h2",{id:"code-tutorials"},"Code Tutorials"),(0,o.kt)("h3",{id:"smart-contract-weapon-struct"},"Smart Contract: Weapon Struct"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    /// Weapon NFT\n    struct Weapon has key, store {\n        id: UID,\n        name: string::String,\n        description: string::String,\n        url: Url,\n        /// TODO: add custom attributes\n        power: u8,\n    }\n")),(0,o.kt)("h3",{id:"smart-contract-ownership"},"Smart Contract: Ownership"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    struct Ownership has key {\n        id: UID\n    }\n\n    fun init(ctx: &mut TxContext) {\n        let ownership = Ownership {\n            id: object::new(ctx),\n        };\n        /// Transfer the ownership object to the module/package publisher\n        transfer::transfer(ownership, tx_context::sender(ctx));\n    }\n\n")),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownership")," object to ensure that only authorized people can mint and modify NFTs. In this example, the authorized people is the module/package publisher (the game company). Transfer the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownership")," object to the publisher in the ",(0,o.kt)("inlineCode",{parentName:"p"},"init")," function, which is executed only once when deploying the smart contract."),(0,o.kt)("h3",{id:"smart-contract-create-weapon"},"Smart Contract: Create Weapon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    /// Create a new Weapon\n    public entry fun mint(\n        _: &Ownership,\n        name: vector<u8>,\n        description: vector<u8>,\n        url: vector<u8>,\n        recipient: address,\n        ctx: &mut TxContext\n    ) {\n        let nft = DevNetNFT {\n            id: object::new(ctx),\n            name: string::utf8(name),\n            description: string::utf8(description),\n            url: url::new_unsafe_from_bytes(url),\n            power: 0\n        };\n\n        transfer::public_transfer(nft, recipient);\n    }\n")),(0,o.kt)("p",null,"Only addresses that own the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ownership")," object can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," function."),(0,o.kt)("h3",{id:"smart-contract-request-updating-weapon"},"Smart Contract: Request Updating Weapon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    /// An object for consign\n    struct ConsignedObj has key, store {\n        id: UID,\n        /// owner of the consigned object\n        sender: address,\n        /// the consigned object\n        weapon: Option<ID>,\n    }\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConsignedObj")," is an object for consigning an item to the game company to request an update to the item."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    /// `users` create an consign for consigning\n    /// an item to `game_company`\n    public entry fun create(\n        third_party: address,\n        weapon: Weapon,\n        ctx: &mut TxContext\n    ) {\n        let sender = tx_context::sender(ctx);\n        let consigned = ConsignedObj { id: object::new(ctx), weapon: option::none(), sender: sender };\n        \n        option::fill(&mut consigned.weapon, object::id(&weapon));\n        dynamic_object_field::add(&mut consigned.id, 0, weapon);\n\n        // consign the object with the trusted third party\n        transfer::public_transfer(consigned, third_party);\n    }\n")),(0,o.kt)("p",null,"Users can call the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," function to request enchanting their item."),(0,o.kt)("h3",{id:"smart-contract-update-weapon"},"Smart Contract: Update Weapon"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    /// `users` create an consign for consigning\n    /// an item to `game_company`\n    public entry fun create<Weapon: key + store>(\n        third_party: address,\n        consigned: Weapon,\n        ctx: &mut TxContext\n    ) {\n        let sender = tx_context::sender(ctx);\n        let id = object::new(ctx);\n        // consign the object with the trusted third party\n        transfer::public_transfer(\n            ConsignedObj<Weapon> {\n                id, sender, consigned\n            },\n            third_party\n        );\n    }\n")),(0,o.kt)("p",null,"Trusted third party can enchant an item. There are three main parts to enchanting."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Verifiable Random Function (",(0,o.kt)("a",{parentName:"p",href:"https://docs.sui.io/learn/cryptography/ecvrf"},"VRF"),")\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"enchant")," function takes parameters a random ",(0,o.kt)("inlineCode",{parentName:"p"},"output"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"alpha_string"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"public_key"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"proof")," generated by the game company via VRF. Then inside the function, the random is verified, and if it passes, the result random output determines whether the item is enchanted or not.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Dynamic NFTs\nIf the random output determines that the item enchant, change the properties of the NFT. These items such as weapon, and armour are all Dynamic NFTs on-chain. As you enchant your item with the scroll, attributes such as power, delay, and durability are all updated live.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Return NFT to the user who requested the enchanting\nUsing the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConsignedObj"),", return NFT to the user who requested the enchanting."))),(0,o.kt)("h2",{id:"deploy-smart-contract-with-welldone-code"},"Deploy Smart Contract with Welldone Code"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Please refer to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.welldonestudio.io/code/getting-started"},"here")," to get started.")),(0,o.kt)("h3",{id:"new-project"},"New Project"),(0,o.kt)("p",null,"Automatically generate a contract structure. Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Create")," button to create a contract structure."),(0,o.kt)("img",{src:t(29647).Z,alt:"template-code-sui",style:{width:"50%"}}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can create your own contract projects without using the features above. However, for the remix plugin to build and deploy the contract, it must be built within the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"sui/"),". If you start a new project, the structure should look like the following.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"sui\n\u2514\u2500\u2500 weapon\n    \u251c\u2500\u2500 Move.toml\n    \u251c\u2500\u2500 Move.lock\n    \u2514\u2500\u2500 sources\n        \u2514\u2500\u2500 weapon.move\n")),(0,o.kt)("h3",{id:"source-code"},"Source Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="weapon.move"',title:'"weapon.move"'},"module examples::weapon {\n    use sui::url::{Self, Url};\n    use std::string;\n    use sui::object::{Self, ID, UID};\n    use sui::event;\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n    use std::option::{Self, Option};\n    use sui::dynamic_object_field;\n    use sui::ecvrf;\n\n    /// Weapon NFT\n    struct Weapon has key, store {\n        id: UID,\n        name: string::String,\n        description: string::String,\n        url: Url,\n        /// TODO: add custom attributes\n        power: u8,\n    }\n\n    struct Ownership has key {\n        id: UID\n    }\n\n    /// An object for consign\n    struct ConsignedObj has key, store {\n        id: UID,\n        /// owner of the consigned object\n        sender: address,\n        /// the consigned object\n        weapon: Option<ID>,\n    }\n\n    fun init(ctx: &mut TxContext) {\n        let ownership = Ownership {\n            id: object::new(ctx),\n        };\n        transfer::transfer(ownership, tx_context::sender(ctx));\n    }\n\n    // ===== Error codes =====\n\n    const ENotVerified: u64 = 0;\n\n    // ===== Events =====\n\n    struct NFTMinted has copy, drop {\n        // The Object ID of the NFT\n        object_id: ID,\n        // The creator of the NFT\n        creator: address,\n        // The name of the NFT\n        name: string::String,\n    }\n    \n    struct NFTUpgrade has copy, drop {\n        // The Object ID of the NFT\n        object_id: ID,\n        // The creator of the NFT\n        creator: address,\n        // The name of the NFT\n        name: string::String,\n\n        power: u8,\n    }\n\n    /// Event on whether the output is verified\n    struct VerifiedEvent has copy, drop {\n        is_verified: bool,\n    }\n\n    // ===== Public view functions =====\n\n    /// Get the NFT's `name`\n    public fun name(nft: &Weapon): &string::String {\n        &nft.name\n    }\n\n    /// Get the NFT's `description`\n    public fun description(nft: &Weapon): &string::String {\n        &nft.description\n    }\n\n    /// Get the NFT's `url`\n    public fun url(nft: &Weapon): &Url {\n        &nft.url\n    }\n\n    /// Get the NFT's `power`\n    public fun power(nft: &Weapon): &u8 {\n        &nft.power\n    }\n\n    // ===== Entrypoints =====\n\n    /// Create a new Weapon\n    public entry fun mint(\n        _: &Ownership,\n        name: vector<u8>,\n        description: vector<u8>,\n        url: vector<u8>,\n        recipient: address,\n        ctx: &mut TxContext\n    ) {\n        let sender = tx_context::sender(ctx);\n        let nft = Weapon {\n            id: object::new(ctx),\n            name: string::utf8(name),\n            description: string::utf8(description),\n            url: url::new_unsafe_from_bytes(url),\n            power: 0\n        };\n\n        event::emit(NFTMinted {\n            object_id: object::id(&nft),\n            creator: sender,\n            name: nft.name,\n        });\n\n        transfer::public_transfer(nft, recipient);\n    }\n\n    /// Transfer `nft` to `recipient`\n    public entry fun transfer(\n        nft: Weapon, recipient: address, _: &mut TxContext\n    ) {\n        transfer::public_transfer(nft, recipient)\n    }\n\n    /// `users` create an consign for consigning\n    /// an item to `game_company`\n    public entry fun create(\n        third_party: address,\n        weapon: Weapon,\n        ctx: &mut TxContext\n    ) {\n        let sender = tx_context::sender(ctx);\n        let consigned = ConsignedObj { id: object::new(ctx), weapon: option::none(), sender: sender };\n        \n        option::fill(&mut consigned.weapon, object::id(&weapon));\n        dynamic_object_field::add(&mut consigned.id, 0, weapon);\n\n        // consign the object with the trusted third party\n        transfer::public_transfer(consigned, third_party);\n    }\n\n    /// Update the `power` of 'nft'\n    public entry fun upgrade_power(_: &Ownership, obj: ConsignedObj, output: vector<u8>, input: vector<u8>, public_key: vector<u8>, proof: vector<u8>, ctx: &mut TxContext) {\n        let verified = ecvrf::ecvrf_verify(&output, &input, &public_key, &proof);\n        event::emit(VerifiedEvent {is_verified: verified});\n\n        assert!(!verified, ENotVerified);\n\n        let third_party = tx_context::sender(ctx);\n        let ConsignedObj {\n            id: id,\n            sender: sender,\n            weapon: temp,\n        } = obj;\n\n        let weapon: Weapon = dynamic_object_field::remove(&mut id, 0);\n        let weapon_id = option::extract(&mut temp);\n        assert!(object::id(&weapon) == weapon_id, 0);\n        \n        weapon.power = weapon.power + 1;\n        \n        event::emit(NFTUpgrade {\n            object_id: weapon_id,\n            creator: third_party,\n            name: weapon.name,\n            power: weapon.power,\n        });\n\n        object::delete(id);\n        transfer::public_transfer(weapon, sender);\n    }\n\n    /// Permanently delete `nft`\n    public entry fun burn(nft: Weapon, _: &mut TxContext) {\n        let Weapon { id, name: _, description: _, url: _, power : _, } = nft;\n        object::delete(id)\n    }\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust",metastring:'title="Move.toml"',title:'"Move.toml"'},'[package]\nname = "Examples"\nversion = "0.0.1"\n\n[dependencies]\nSui = { git = "https://github.com/MystenLabs/sui.git", subdir="crates/sui-framework/packages/sui-framework/", rev = "testnet" }\n\n[addresses]\nexamples = "0x0"\n')),(0,o.kt)("h3",{id:"compile-the-source-code"},"Compile The Source Code"),(0,o.kt)("p",null,"Select the project you want to compile. For now, let's choose ",(0,o.kt)("inlineCode",{parentName:"p"},"sui/weapon")," and click ",(0,o.kt)("inlineCode",{parentName:"p"},"Compile")," button."),(0,o.kt)("h3",{id:"deployment"},"Deployment"),(0,o.kt)("p",null,"If the compilation succeed, you can see mv file ",(0,o.kt)("inlineCode",{parentName:"p"},"weapon.mv"),"."),(0,o.kt)("p",null,"Click the ",(0,o.kt)("inlineCode",{parentName:"p"},"Deploy")," button."),(0,o.kt)("p",null,"and you can see wallet popup. Let's click ",(0,o.kt)("inlineCode",{parentName:"p"},"Send")," button."),(0,o.kt)("h3",{id:"check-out-deployed-contract"},"Check Out Deployed Contract"),(0,o.kt)("p",null,"After deployment, you can see weapon module and functions."),(0,o.kt)("h3",{id:"calling-contract-functions"},"Calling Contract Functions"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select ",(0,o.kt)("inlineCode",{parentName:"p"},"mint")," function. First parameter is Ownership object id.\nYou can get the object id in the terminal log which shows for above deployment transaction result.\nThe second through third parameters are the name, description, and url of the NFT to mint, in that order.\nThe fourth parameter is the address to which the minted NFTs will be sent.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"After mint transaction, check if Weapon was minted in ",(0,o.kt)("a",{parentName:"p",href:"https://suiexplorer.com/"},"SUI Explorer"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," function with the recipient's account that you entered in the 4th parameter in step 1.\nThe first parameter is the type of Weapon NFT you want to update. The second parameter is the address where you deployed this smart contract. The third parameter is the object ID of the Weapon NFT you want to update.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Return to the account where you deployed the smart contract and run the ",(0,o.kt)("inlineCode",{parentName:"p"},"enchant")," function.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"After enchant transaction, check if Weapon was returned to the user and updated in ",(0,o.kt)("a",{parentName:"p",href:"https://suiexplorer.com/"},"SUI Explorer"),"."))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"reference"},"Reference"))}m.isMDXComponent=!0},29647:function(e,n,t){n.Z=t.p+"assets/images/new-project-sui-d601ee9d8bfcaf072ca1f96eb7d793a1.png"}}]);