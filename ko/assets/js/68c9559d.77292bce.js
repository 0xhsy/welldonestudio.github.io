"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[6921],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var l=a.createContext({}),i=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=i(n.components);return a.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),d=i(t),m=r,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(g,s(s({ref:e},u),{},{components:t})):a.createElement(g,s({ref:e},u))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,s=new Array(o);s[0]=d;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:r,s[1]=c;for(var i=2;i<o;i++)s[i]=t[i];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},63564:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var a=t(83117),r=t(80102),o=(t(67294),t(3905)),s=["components"],c={keywords:["\uc194\ub77c\ub098 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1","dapp:signAndSendTransaction","\uc194\ub77c\ub098"],description:"Solana\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30"},l="Solana",i={unversionedId:"wallet/developer-guide/sending-transaction/solana",id:"wallet/developer-guide/sending-transaction/solana",title:"Solana",description:"Solana\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30",source:"@site/i18n/ko/docusaurus-plugin-content-docs/current/wallet/developer-guide/sending-transaction/solana.md",sourceDirName:"wallet/developer-guide/sending-transaction",slug:"/wallet/developer-guide/sending-transaction/solana",permalink:"/ko/wallet/developer-guide/sending-transaction/solana",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/developer-guide/sending-transaction/solana.md",tags:[],version:"current",frontMatter:{keywords:["\uc194\ub77c\ub098 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1","dapp:signAndSendTransaction","\uc194\ub77c\ub098"],description:"Solana\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158 \ubcf4\ub0b4\uae30"},sidebar:"tutorialSidebar",previous:{title:"NEAR",permalink:"/ko/wallet/developer-guide/sending-transaction/near"},next:{title:"Execute the Contract",permalink:"/ko/execute-the-contract"}},u={},p=[{value:"1. Returns",id:"1-returns",level:2},{value:"2. Params",id:"2-params",level:2},{value:"3. Example",id:"3-example",level:2}],d={toc:p};function m(n){var e=n.components,t=(0,r.Z)(n,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solana"},"Solana"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"\uc774 \ud30c\ud2b8\uc5d0\uc11c\ub294 Solana \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1\uc744 ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp.request"),"\ub97c \ud1b5\ud574 \uc2dc\uc791\ud558\ub294 \ubc29\uc2dd\uc744 \uc18c\uac1c\ud569\ub2c8\ub2e4. \uc774 API\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub192\uc740 \uc218\uc900\uc758 \ucd94\uc0c1\ud654\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 \uacf5\uae09\uc790\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0, \ud3b8\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. WELLDONE Wallet\uc740 dapp \uba54\uc18c\ub4dc\uc758 \ud3b8\ub9ac\ud55c \uc0ac\uc6a9\uc744 \uc704\ud55c \ubc29\ubc95\uc744 \uac15\uad6c \uc911\uc785\ub2c8\ub2e4.")),(0,o.kt)("p",null,"Solana \ub124\ud2b8\uc6cc\ud06c\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc11c\ub294 \ub2e4\uc74c\uc758 \uacfc\uc815\uc774 \uba3c\uc800 \ud544\uc694\ud569\ub2c8\ub2e4."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Universal Provider (",(0,o.kt)("inlineCode",{parentName:"li"},"window.dapp"),") \uac10\uc9c0"),(0,o.kt)("li",{parentName:"ol"},"\uc0ac\uc6a9\uc790\uac00 \uc5f0\uacb0\ub41c Solana \ub124\ud2b8\uc6cc\ud06c \uac10\uc9c0"),(0,o.kt)("li",{parentName:"ol"},"\uc0ac\uc6a9\uc790\uc758 Solana \uacc4\uc815 \uac00\uc838\uc624\uae30")),(0,o.kt)("p",null,"\uc758 \uc804\uc81c\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. WELLDONE Wallet\uc5d0\uc11c\ub294 \ud574\ub2f9 \uc9c0\uac11 \uc8fc\uc18c\uc5d0 \uc5f0\uacb0\ub41c \ub124\ud2b8\uc6cc\ud06c\ub97c \uc790\ub3d9\uc73c\ub85c \uac10\uc9c0\ud558\uc5ec \uac00\uc838\uc635\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc774\uc804\uc5d0 \uba54\uc778\ub137\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0bc \uac83\uc778\uc9c0, \ud14c\uc2a4\ud2b8\ub137\uc5d0 \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0bc \uac83\uc778\uc9c0 \ubbf8\ub9ac \uace0\ub824\ud574\ub450\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc740 \uc544\ub798\uc640 \uac19\uc740 \ud3ec\ub9f7\uc744 \ud1b5\ud574 \uc804\uc1a1\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const response = await dapp.request('solana', {\n  method: 'dapp:signAndSendTransaction',\n  params: [HEX_STRING_TX_DATA],\n});\n")),(0,o.kt)("h2",{id:"1-returns"},"1. Returns"),(0,o.kt)("p",null,"\ud574\ub2f9 \uba54\uc18c\ub4dc\ub294 \ub2e8\uc77c \ud2b8\ub79c\uc7ad\uc158 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc5ec\ub7ec \uac1c\uc758 \ud2b8\ub79c\uc7ad\uc158 \uc804\uc1a1\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0, \ud2b8\ub79c\uc7ad\uc158 \ud574\uc2dc \uac12\uc744 string \ud0c0\uc785\uc758 ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," \ubc30\uc5f4\ub85c \ubc18\ud658\ud569\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string[]>;\n")),(0,o.kt)("h2",{id:"2-params"},"2. Params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type HEX_STRING_TX_DATA = string;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"SOLANA\uc5d0\uc11c \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 \ud2b8\ub79c\uc7ad\uc158\uc744 HEX String \ud0c0\uc785\uc73c\ub85c \uc9c1\ub82c\ud654\ud55c \uac12\uc744 \uc778\uc790\ub85c \uc804\ub2ec\ud574\uc57c \ud569\ub2c8\ub2e4.")),(0,o.kt)("h2",{id:"3-example"},"3. Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const getSerializedTransaction = async (accounts) => {\n  const connection = new Connection('https://api.devnet.solana.com', 'confirmed');\n  const pubKey = new PublicKey(accounts.pubKey);\n  const RecentBlockHash = await connection.getLatestBlockhash();\n\n  const transaction = new Transaction({\n    /* new blockHash */\n    blockhash: RecentBlockHash.blockhash,\n    lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n    feePayer: pubKey,\n  });\n\n  transaction.add(\n    SystemProgram.transfer({\n      fromPubkey: pubKey,\n      lamports: Number(0.1) * LAMPORTS_PER_SOL,\n      toPubkey: pubKey, // send to yourself\n    }),\n  );\n  return transaction.compileMessage().serialize().toString('hex');\n};\n\nconst sendTransaction = async () => {\n  // get accounts first\n  const accounts = await dapp.request('solana', { method: 'dapp:accounts' });\n  const HEX_STRING_TX_DATA = await getSerializedTransaction(accounts['solana']);\n  // sending a transaction\n  try {\n    const response = await dapp.request('solana', {\n      method: 'dapp:signAndSendTransaction',\n      params: [\n        // use serialized transaction\n        [`0x${HEX_STRING_TX_DATA}`],\n      ],\n    });\n    const txHash = response[0];\n  } catch (error) {\n    /*\n        {\n          message: 'User denied transaction signature',\n          code: 4001,\n        }\n      */\n  }\n};\n")),(0,o.kt)("p",null,"\uc544\ub798\uc758 \uc608\uc81c\ub97c \ud1b5\ud574 \uc2e4\uc81c\ub85c \ud2b8\ub79c\uc7ad\uc158\uc744 \uc804\uc1a1\ud574 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud2b8\ub79c\uc7ad\uc158\uc744 \ubcf4\ub0b4\uae30 \uc704\ud574\uc120 \ud14c\uc2a4\ud2b8\ub137 \ud1a0\ud070\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc9c0\uac11 \ub0b4\uc758 FAUCET \ud0ed\uc5d0\uc11c faucet\uc744 \uc694\uccad\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'solana';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n      if (Object.keys(accounts).length === 0) {\n        throw new Error('There is no accounts.');\n      }\n      setAccounts(accounts[CHAIN_NAME]);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n  const getSerializedTransaction = async () => {\n    try {\n      const connection = new Connection('https://api.devnet.solana.com', 'confirmed');\n      const pubKey = new PublicKey(accounts.pubKey);\n      const RecentBlockHash = await connection.getLatestBlockhash();\n\n      const transaction = new Transaction({\n        /* new blockHash */\n        blockhash: RecentBlockHash.blockhash,\n        lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n        feePayer: pubKey,\n      });\n\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: pubKey,\n          lamports: Number(0.1) * LAMPORTS_PER_SOL,\n          toPubkey: pubKey, // send to yourself\n        }),\n      );\n\n      return transaction.compileMessage().serialize().toString('hex');\n    } catch (error) {\n      /* error */\n      console.log(error);\n    }\n  };\n\n  async function handleSendTransaction() {\n    try {\n      const HEX_STRING_TX_DATA = await getSerializedTransaction();\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:signAndSendTransaction',\n        params: [`0x${HEX_STRING_TX_DATA}`],\n      });\n      const txHash = response[0];\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);