"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[2038],{3905:function(n,e,t){t.d(e,{Zo:function(){return l},kt:function(){return m}});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=r.createContext({}),u=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},l=function(n){var e=u(n.components);return r.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,c=n.parentName,l=i(n,["components","mdxType","originalType","parentName"]),p=u(t),m=a,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(g,s(s({ref:e},l),{},{components:t})):r.createElement(g,s({ref:e},l))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,s=new Array(o);s[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:a,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},38903:function(n,e,t){t.r(e),t.d(e,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return d}});var r=t(83117),a=t(80102),o=(t(67294),t(3905)),s=["components"],i={keywords:["Neutron sending transaction","dapp:signAndSendTransaction","Neutron"],description:"Sending Transactions in Neutron"},c="Neutron",u={unversionedId:"wallet/developer-guide/sending-transaction/neutron",id:"wallet/developer-guide/sending-transaction/neutron",title:"Neutron",description:"Sending Transactions in Neutron",source:"@site/docs/wallet/developer-guide/sending-transaction/neutron.md",sourceDirName:"wallet/developer-guide/sending-transaction",slug:"/wallet/developer-guide/sending-transaction/neutron",permalink:"/wallet/developer-guide/sending-transaction/neutron",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/developer-guide/sending-transaction/neutron.md",tags:[],version:"current",frontMatter:{keywords:["Neutron sending transaction","dapp:signAndSendTransaction","Neutron"],description:"Sending Transactions in Neutron"},sidebar:"tutorialSidebar",previous:{title:"Neon",permalink:"/wallet/developer-guide/sending-transaction/neon"},next:{title:"Solana",permalink:"/wallet/developer-guide/sending-transaction/solana"}},l={},d=[{value:"1. Returns",id:"1-returns",level:2},{value:"2. Params",id:"2-params",level:2},{value:"3. Example",id:"3-example",level:2}],p={toc:d};function m(n){var e=n.components,t=(0,a.Z)(n,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"neutron"},"Neutron"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Neutron developers make use of external libraries like ",(0,o.kt)("a",{parentName:"p",href:"https://cosmos.github.io/cosmjs/"},"CosmJS"),". The following is an explanation of how to initiate a transfer transaction by invoking the method through ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp.request"),". We recommend utilizing a dedicated library rather than accessing the service directly if you want a greater degree of abstraction than the API provides.")),(0,o.kt)("p",null,"To send a transaction in Neutron network, it needs to be followed the steps below."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Detecting of Universal Provider (",(0,o.kt)("inlineCode",{parentName:"li"},"window.dapp"),")"),(0,o.kt)("li",{parentName:"ol"},"Detecting the Neutron network to which the user is linked"),(0,o.kt)("li",{parentName:"ol"},"Import the Neutron account of the user")),(0,o.kt)("p",null,"The WELLDONE Wallet finds and imports networks associated with that wallet address. Before submitting a transaction, you should evaluate whether to transmit it to the mainnet or the testnet. The following format can be used to transmit the transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const response = await dapp.request('neutron', {\n  method: 'dapp:signAndSendTransaction',\n  params: [JSON.stringify(transactionParameters)],\n")),(0,o.kt)("h2",{id:"1-returns"},"1. Returns"),(0,o.kt)("p",null,"This method returns the transaction hash value as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," object of type string because you can send multiple transactions as well as one transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string[]>;\n")),(0,o.kt)("h2",{id:"2-params"},"2. Params"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp:signAndSendTransaction")," method takes the transaction as HEX string type ",(0,o.kt)("inlineCode",{parentName:"p"},"HEX_STRING_TX_DATA"),". However, Neutron networks can take the transaction parameters as JSON string type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TransactionParameters {\n  signerData: {\n    accountNumber: string;\n    sequence: string;\n    chainId: string;\n  };\n  fee: {\n    amount: [\n      {\n        denom: string;\n        amount: string;\n      },\n    ];\n    gas: string;\n  };\n  memo: string;\n  msgs: [\n    {\n      typeUrl: '/cosmos.bank.v1beta1.MsgSend';\n      value: {\n        fromAddress: string;\n        toAddress: string;\n        amount: [{ denom: string; amount: string }];\n      };\n    },\n  ];\n  sequence: string;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"value")," depends on the type of ",(0,o.kt)("inlineCode",{parentName:"li"},"typeUrl")," and the method of the contract you want to execute. The above parameters are examples of transaction types that send coins to other accounts.")),(0,o.kt)("h2",{id:"3-example"},"3. Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const sendTransaction = async () => {\n  // get accounts first\n  const accounts = await dapp.request('neutron', { method: 'dapp:accounts' });\n  const sequence = '10';\n  const chainId = 'pion-1';\n  const transactionParameters = {\n    signerData: {\n      accountNumber: accounts['neutron'].address,\n      sequence,\n      chainId,\n    },\n    fee: {\n      amount: [\n        {\n          denom: 'untrn',\n          amount: '4000',\n        },\n      ],\n      gas: '180000', // 180k\n    },\n    memo: '',\n    msgs: [\n      {\n        typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n        value: {\n          fromAddress: accounts['neutron'].address,\n          toAddress: accounts['neutron'].address, // send to yourself\n          amount: [{ denom: 'untrn', amount: '10000' }],\n        },\n      },\n    ],\n    sequence: `${sequence}`,\n  };\n  // sending a transaction\n  try {\n    const response = await dapp.request('neutron', {\n      method: 'dapp:signAndSendTranssaction',\n      params: [JSON.stringify(transactionParameters)],\n    });\n    const txHash = response[0];\n  } catch (error) {\n    /* \n      {\n        message: 'User denied transaction signature',\n        code: 4001,\n      }\n    */\n  }\n};\n")),(0,o.kt)("p",null,"To complete the transaction, follow the steps outlined below. The testnet token is required to transmit a transaction. You can request faucet through the FAUCET tab in the wallet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'neutron';\n  const sequence = '10';\n  const chainId = 'pion-1';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n      if (Object.keys(accounts).length === 0) {\n        throw new Error('There is no accounts.');\n      }\n      const status = await dapp.request('neutron', {\n        method: 'status',\n      });\n      if (status.node_info.network !== 'pion-1') {\n        throw new Error('Please change to Neutron Testnet in WELLDONE Wallet');\n      }\n      setAccounts(accounts[CHAIN_NAME].address);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  async function handleSendTransaction() {\n    try {\n      const transactionParameters = {\n        signerData: {\n          accountNumber: accounts,\n          sequence,\n          chainId,\n        },\n        fee: {\n          amount: [\n            {\n              denom: 'untrn',\n              amount: '4000',\n            },\n          ],\n          gas: '180000', // 180k\n        },\n        memo: '',\n        msgs: [\n          {\n            typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n            value: {\n              fromAddress: accounts,\n              toAddress: accounts, // send to yourself\n              amount: [{ denom: 'untrn', amount: '10000' }],\n            },\n          },\n        ],\n        sequence: `${sequence}`,\n      };\n\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:signAndSendTransaction',\n        params: [JSON.stringify(transactionParameters)],\n      });\n      const txHash = response[0];\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);