"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[8803],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var a=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,c=n.parentName,u=i(n,["components","mdxType","originalType","parentName"]),p=l(t),m=o,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||r;return t?a.createElement(h,s(s({ref:e},u),{},{components:t})):a.createElement(h,s({ref:e},u))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,s=new Array(r);s[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:o,s[1]=i;for(var l=2;l<r;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},99130:function(n,e,t){t.r(e),t.d(e,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var a=t(83117),o=t(80102),r=(t(67294),t(3905)),s=["components"],i={keywords:["Solana sendTransaction","dapp:sendTransaction","Solana"],description:"Sending Transactions in Solana"},c="Solana",l={unversionedId:"wallet/developer-guide/sending-transaction/solana",id:"wallet/developer-guide/sending-transaction/solana",title:"Solana",description:"Sending Transactions in Solana",source:"@site/docs/wallet/developer-guide/sending-transaction/solana.md",sourceDirName:"wallet/developer-guide/sending-transaction",slug:"/wallet/developer-guide/sending-transaction/solana",permalink:"/wallet/developer-guide/sending-transaction/solana",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/developer-guide/sending-transaction/solana.md",tags:[],version:"current",frontMatter:{keywords:["Solana sendTransaction","dapp:sendTransaction","Solana"],description:"Sending Transactions in Solana"},sidebar:"tutorialSidebar",previous:{title:"Neutron",permalink:"/wallet/developer-guide/sending-transaction/neutron"},next:{title:"Sui",permalink:"/wallet/developer-guide/sending-transaction/sui"}},u={},d=[{value:"1. Returns",id:"1-returns",level:2},{value:"2. Params",id:"2-params",level:2},{value:"3. Example",id:"3-example",level:2}],p={toc:d};function m(n){var e=n.components,t=(0,o.Z)(n,s);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"solana"},"Solana"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The following is an explanation of how to initiate a transfer transaction in Solana network by invoking the through ",(0,r.kt)("inlineCode",{parentName:"p"},"dapp.request"),". We recommend utilizing a dedicated library rather than accessing the service directly if you want a greater degree of abstraction than the official API provides.")),(0,r.kt)("p",null,"To send a transaction in Solana network, it needs to be followed the steps below."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Detecting of Universal Provider (",(0,r.kt)("inlineCode",{parentName:"li"},"window.dapp"),")"),(0,r.kt)("li",{parentName:"ol"},"Detecting the Solana network to which the user is linked"),(0,r.kt)("li",{parentName:"ol"},"Import the Solana account of the user")),(0,r.kt)("p",null,"The WELLDONE Wallet finds and imports networks associated with that wallet address. Before submitting a transaction, you should evaluate whether to transmit it to the mainnet or the testnet. The following format can be used to transmit the transaction:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const response = await dapp.request('solana', {\n  method: 'dapp:signAndSendTransaction',\n  params: [HEX_STRING_TX_DATA],\n});\n")),(0,r.kt)("h2",{id:"1-returns"},"1. Returns"),(0,r.kt)("p",null,"This method returns the transaction hash value as a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise")," object of type string because you can send multiple transactions as well as one transaction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string[]>;\n")),(0,r.kt)("h2",{id:"2-params"},"2. Params"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type HEX_STRING_TX_DATA = string;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HEX_STRING_TX_DATA")," must be passed to the parameter in order for a transaction to be sent from Solana.")),(0,r.kt)("h2",{id:"3-example"},"3. Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const getSerializedTransaction = async (accounts) => {\n  const connection = new Connection('https://api.devnet.solana.com', 'confirmed');\n  const pubKey = new PublicKey(accounts.address);\n  const RecentBlockHash = await connection.getLatestBlockhash();\n\n  const transaction = new Transaction({\n    /* new blockHash */\n    blockhash: RecentBlockHash.blockhash,\n    lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n    feePayer: pubKey,\n  });\n\n  transaction.add(\n    SystemProgram.transfer({\n      fromPubkey: pubKey,\n      lamports: Number(0.1) * LAMPORTS_PER_SOL,\n      toPubkey: pubKey, // send to yourself\n    }),\n  );\n  return transaction.compileMessage().serialize().toString('hex');\n};\n\nconst sendTransaction = async () => {\n  // get accounts first\n  const accounts = await dapp.request('solana', { method: 'dapp:accounts' });\n  const HEX_STRING_TX_DATA = await getSerializedTransaction(accounts['solana']);\n  // sending a transaction\n  try {\n    const response = await dapp.request('solana', {\n      method: 'dapp:signAndSendTransaction',\n      params: [\n        // use serialized transaction\n        [`0x${HEX_STRING_TX_DATA}`],\n      ],\n    });\n    const txHash = response[0];\n  } catch (error) {\n    /*\n        {\n          message: 'User denied transaction signature',\n          code: 4001,\n        }\n      */\n  }\n};\n")),(0,r.kt)("p",null,"To complete the transaction, follow the steps outlined below. The testnet token is required to transmit a transaction. You can request faucet through the FAUCET tab in the wallet."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'solana';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n      if (Object.keys(accounts).length === 0) {\n        throw new Error('There is no accounts.');\n      }\n      setAccounts(accounts[CHAIN_NAME]);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n  const getSerializedTransaction = async () => {\n    try {\n      const connection = new Connection('https://api.devnet.solana.com', 'confirmed');\n      const pubKey = new PublicKey(accounts.address);\n      const RecentBlockHash = await connection.getLatestBlockhash();\n\n      const transaction = new Transaction({\n        /* new blockHash */\n        blockhash: RecentBlockHash.blockhash,\n        lastValidBlockHeight: RecentBlockHash.lastValidBlockHeight,\n        feePayer: pubKey,\n      });\n\n      transaction.add(\n        SystemProgram.transfer({\n          fromPubkey: pubKey,\n          lamports: Number(0.1) * LAMPORTS_PER_SOL,\n          toPubkey: pubKey, // send to yourself\n        }),\n      );\n\n      return transaction.compileMessage().serialize().toString('hex');\n    } catch (error) {\n      /* error */\n      console.log(error);\n    }\n  };\n\n  async function handleSendTransaction() {\n    try {\n      const HEX_STRING_TX_DATA = await getSerializedTransaction();\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:signAndSendTransaction',\n        params: [`0x${HEX_STRING_TX_DATA}`],\n      });\n      const txHash = response[0];\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);