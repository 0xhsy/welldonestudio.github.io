"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[130],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,h=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(h,c(c({ref:n},u),{},{components:t})):r.createElement(h,c({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3573:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),c=["components"],s={},i=void 0,l={unversionedId:"execute-the-contract/NEAR",id:"execute-the-contract/NEAR",title:"NEAR",description:"Params",source:"@site/docs/execute-the-contract/NEAR.md",sourceDirName:"execute-the-contract",slug:"/execute-the-contract/NEAR",permalink:"/docs/execute-the-contract/NEAR",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/docs/execute-the-contract/NEAR.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ethereum, Celo, Klaytn",permalink:"/docs/execute-the-contract/Ethereum, Celo, Klaytn"}},u={},p=[{value:"Params",id:"params",level:2},{value:"Example",id:"example",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"params"},"Params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type serializedTransaction = string;\n")),(0,o.kt)("p",null,"To execute transactions from NEAR, the parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"serializedTransaction")," must be provided. These data are available through the ",(0,o.kt)("inlineCode",{parentName:"p"},"near-api-js")," library, and comprehensive usage is explained in the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.near.org/integrator/create-transactions"},"link")," and the example below."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Consider the following example of connecting with a pre-deployed counter contract on the NEAR Testnet. The contract code is available on the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/DSRV-DevGuild/near-counter-example"},"repository"),"."),(0,o.kt)("p",null,"You are required to have at least certain amount of NEAR to execute a transaction that modifies the state of the contract so use the ",(0,o.kt)("a",{parentName:"p",href:"https://www.allthatnode.com/faucet/near.dsrv"},"faucet")," to pay gas fee."),(0,o.kt)("p",null,"The code that follows sends a transaction that runs the contract's ",(0,o.kt)("inlineCode",{parentName:"p"},"increment")," operation.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"increment")," method employs the ","[FunctionCall]"," (",(0,o.kt)("a",{parentName:"p",href:"https://nomicon.io/RuntimeSpec/Actions#functioncallaction"},"https://nomicon.io/RuntimeSpec/Actions#functioncallaction"),") action type to add the counter value within the contract by the count value supplied as an input parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'near';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n  const getSerializedTransaction = async () => {\n    try {\n      const rpc = 'https://rpc.testnet.near.org';\n      const provider = new providers.JsonRpcProvider(rpc);\n      const signerId = accounts.address;\n      const publicKey = accounts.pubKey;\n\n      const accessKey = await provider.query(`access_key/${signerId}/${publicKey}`, '');\n\n      const actions = [transactions.functionCall(\n        \"increment\", // methodName\n        {\"count\" : 5}, // args\n        new BN('30000000000000'), // 30 TGas\n        new BN(0),\n      )];\n      const recentBlockHash = utils.serialize.base_decode(accessKey.block_hash);\n\n      // make transaction\n      const transaction = transactions.createTransaction(\n        signerId, // signerId\n        utils.PublicKey.fromString(publicKey), //pubKey\n        'mycontract.myaccount8.testnet', // contract Id\n        accessKey.nonce + 1, // nonce\n        actions, // actions\n        recentBlockHash, // recentBlockHash\n      );\n      console.log(transaction);\n      const bytes = transaction.encode();\n\n      return Buffer.from(bytes).toString('base64');\n    } catch (error) {\n      /* error */\n      console.log(error);\n    }\n  };\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n\n      setAccounts(accounts[CHAIN_NAME]);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  async function handleSendTransaction() {\n    try {\n      const serializedTransaction = await getSerializedTransaction();\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:sendTransaction',\n        params: [`${serializedTransaction}`],\n      });\n      const txHash = response;\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);