"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[5958],{3905:function(n,t,e){e.d(t,{Zo:function(){return l},kt:function(){return m}});var r=e(67294);function a(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function s(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){a(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,r,a=function(n,t){if(null==n)return{};var e,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(a[e]=n[e]);return a}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(a[e]=n[e])}return a}var i=r.createContext({}),u=function(n){var t=r.useContext(i),e=t;return n&&(e="function"==typeof n?n(t):s(s({},t),n)),e},l=function(n){var t=u(n.components);return r.createElement(i.Provider,{value:t},n.children)},d={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(n,t){var e=n.components,a=n.mdxType,o=n.originalType,i=n.parentName,l=c(n,["components","mdxType","originalType","parentName"]),p=u(e),m=a,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return e?r.createElement(f,s(s({ref:t},l),{},{components:e})):r.createElement(f,s({ref:t},l))}));function m(n,t){var e=arguments,a=t&&t.mdxType;if("string"==typeof n||a){var o=e.length,s=new Array(o);s[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=n,c.mdxType="string"==typeof n?n:a,s[1]=c;for(var u=2;u<o;u++)s[u]=e[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,e)}p.displayName="MDXCreateElement"},58999:function(n,t,e){e.r(t),e.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return d}});var r=e(83117),a=e(80102),o=(e(67294),e(3905)),s=["components"],c={title:"Execute the Contract",description:"Execute the Contract using Universal Provider"},i="Execute the Contract in NEAR using Universal Provider",u={unversionedId:"tutorials/near/rust/near-frontend",id:"tutorials/near/rust/near-frontend",title:"Execute the Contract",description:"Execute the Contract using Universal Provider",source:"@site/docs/tutorials/near/rust/near-frontend.md",sourceDirName:"tutorials/near/rust",slug:"/tutorials/near/rust/near-frontend",permalink:"/tutorials/near/rust/near-frontend",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/tutorials/near/rust/near-frontend.md",tags:[],version:"current",frontMatter:{title:"Execute the Contract",description:"Execute the Contract using Universal Provider"},sidebar:"tutorialSidebar",previous:{title:"Rust Smart Contract in NEAR",permalink:"/tutorials/near/rust/near-contract"},next:{title:"Near Ecosystem",permalink:"/tutorials/near-ecosystem/"}},l={},d=[{value:"Example Code",id:"example-code",level:2}],p={toc:d};function m(n){var t=n.components,e=(0,a.Z)(n,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"execute-the-contract-in-near-using-universal-provider"},"Execute the Contract in NEAR using Universal Provider"),(0,o.kt)("div",null,(0,o.kt)("span",{className:"author-sm"},"September 8, 2022"),(0,o.kt)("div",{className:"author-div"},(0,o.kt)("div",{className:"author-avatars"},(0,o.kt)("a",{href:"https://github.com/Yoon-Suji",target:"_blank"},(0,o.kt)("img",{src:"https://avatars.githubusercontent.com/u/70956926?v=4"}))),(0,o.kt)("div",null,(0,o.kt)("span",{className:"author-name"},"Suji Yoon"),(0,o.kt)("br",null),(0,o.kt)("span",{className:"author-sm"},"Software Engineer, DSRV ")))),(0,o.kt)("h2",{id:"example-code"},"Example Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function increment() {\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n  const [contractAddress, setContractAddress] = React.useState(null);\n  const [isSubmit, setIsSubmit] = React.useState(false);\n\n  async function handleGetAccount() {\n    const account = await dapp.request('near', {\n      method: 'dapp:accounts',\n    });\n    setAccounts(account['near']);\n  }\n\n  async function handleSendTransaction() {\n    const rpc = 'https://near-testnet-rpc.allthatnode.com:3030';\n    const provider = new providers.JsonRpcProvider(rpc);\n    const accessKey = await provider.query(`access_key/${accounts.address}/${accounts.pubKey}`, '');\n    const recentBlockHash = utils.serialize.base_decode(accessKey.block_hash);\n\n    const actions = [\n      transactions.functionCall(\n        'increment', // methodName\n        {}, // args\n        new BN('30000000000000'), // 30 TGas\n        new BN(0), // deposit\n      ),\n    ];\n\n    const transaction = transactions.createTransaction(\n      accounts.address, // signerId\n      utils.PublicKey.fromString(accounts.pubKey), //pubKey\n      contractAddress, // contract Id\n      accessKey.nonce + 1, // nonce\n      actions, // actions\n      recentBlockHash, // recentBlockHash\n    );\n\n    const serializedTransaction = Buffer.from(transaction.encode()).toString('base64');\n    const txHash = await dapp.request('near', {\n      method: 'dapp:sendTransaction',\n      params: [serializedTransaction],\n    });\n    setTxHash(txHash);\n  }\n\n  const handleChange = (e) => {\n    setContractAddress(e.target.value);\n  };\n\n  const handleContractId = () => {\n    if (\n      contractAddress.includes('near') ||\n      contractAddress.includes('testnet') ||\n      contractAddress.includes('devnet')\n    ) {\n      setIsSubmit(true);\n    } else {\n      alert('You have to enter valid contract address');\n    }\n  };\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          {isSubmit ? (\n            <Button onClick={handleSendTransaction} type=\"button\">\n              Send a Transaction\n            </Button>\n          ) : (\n            <>\n              <Input\n                value={contractAddress}\n                onChange={handleChange}\n                placeholder=\"Deploayed Contract Address\"\n                style={{ marginRight: '8px' }}\n              />\n              <Button onClick={handleContractId} type=\"button\">\n                Set a Contract Address\n              </Button>\n            </>\n          )}\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {contractAddress && isSubmit && (\n        <ResultTooltip style={{ background: '#F4F4F4', color: 'black' }}>\n          <b>Contract Address:</b> {contractAddress}\n        </ResultTooltip>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);