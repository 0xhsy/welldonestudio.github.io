"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[734],{3905:function(n,e,t){t.d(e,{Zo:function(){return m},kt:function(){return u}});var o=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,o,r=function(n,e){if(null==n)return{};var t,o,r={},i=Object.keys(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(o=0;o<i.length;o++)t=i[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=o.createContext({}),l=function(n){var e=o.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},m=function(n){var e=l(n.components);return o.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},d=o.forwardRef((function(n,e){var t=n.components,r=n.mdxType,i=n.originalType,c=n.parentName,m=s(n,["components","mdxType","originalType","parentName"]),d=l(t),u=r,h=d["".concat(c,".").concat(u)]||d[u]||p[u]||i;return t?o.createElement(h,a(a({ref:e},m),{},{components:t})):o.createElement(h,a({ref:e},m))}));function u(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1315:function(n,e,t){t.r(e),t.d(e,{assets:function(){return m},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var o=t(3117),r=t(102),i=(t(7294),t(3905)),a=["components"],s={},c=void 0,l={unversionedId:"add-chain/Cosmos",id:"add-chain/Cosmos",title:"Cosmos",description:"Cosmos params",source:"@site/docs/add-chain/Cosmos.md",sourceDirName:"add-chain",slug:"/add-chain/Cosmos",permalink:"/docs/add-chain/Cosmos",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/add-chain/Cosmos.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Add Chain",permalink:"/docs/add-chain"},next:{title:"Ethereum",permalink:"/docs/add-chain/Ethereum"}},m={},p=[{value:"Cosmos params",id:"cosmos-params",level:2},{value:"Example",id:"example",level:2}],d={toc:p};function u(n){var e=n.components,t=(0,r.Z)(n,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"cosmos-params"},"Cosmos params"),(0,i.kt)("p",null,"Cosmos \uae30\ubc18 \ub124\ud2b8\uc6cc\ud06c\ub97c \ucd94\uac00\ud558\uace0\uc790 \ud560 \ub54c\ub294 ",(0,i.kt)("inlineCode",{parentName:"p"},"params"),"\uc5d0 \ub2e4\uc74c\uc758 \uac1d\uccb4\ub97c \uc778\uc790\ub85c \ub118\uaca8\uc90d\ub2c8\ub2e4.\n\uc544\ub798\ub294 Cosmos\uc758 \uc778\ud130\uccb4\uc778\uc744 \uc9c0\uc6d0\ud558\ub294 Keplr \uc5d0\uc11c \uc81c\uc548\ud55c Cosmos \uc0dd\ud0dc\uacc4 \ud45c\uc900\uc744 \ub530\ub985\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Cosmos"',title:'"Cosmos"'},"interface ChainData {\n  // Identifier to distinguish the chain\n  chainId: string;\n  // The name of the chain to be displayed to the user.\n  chainName: string;\n  // RPC endpoint of the chain\n  rpc: string;\n  // REST endpoint of the chain.\n  rest: string;\n  // BIP44 path\n  bip44: {\n    // We recommend using 118(Cosmos Hub) as this would provide good Ledger hardware wallet compatibility by utilizing the Cosmos Ledger app.\n    coinType: number;\n  };\n  // Bech32 config using the address prefix of the chain\n  bech32Config: {\n    bech32PrefixAccAddr: string;\n    bech32PrefixAccPub: string;\n    bech32PrefixValAddr: string;\n    bech32PrefixValPub: string;\n    bech32PrefixConsAddr: string;\n    bech32PrefixConsPub: string;\n  };\n  // Information on the staking token of the chain\n  stakeCurrency: {\n    coinDenom: string;\n    coinMinimalDenom: string;\n    coinDecimals: number;\n  };\n  // List of all coin/tokens used in this chain.\n  currencies: [\n    {\n      coinDenom: string;\n      coinMinimalDenom: string;\n      coinDecimals: number;\n    }\n  ];\n  // List of coin/tokens used as a fee token in this chain.\n  feeCurrencies: [\n    {\n      coinDenom: string;\n      coinMinimalDenom: string;\n      coinDecimals: number;\n    }\n  ];\n  // (Optional) The number of the coin type.\n  // This field is only used to fetch the address from ENS.\n  // Ideally, it is recommended to be the same with BIP44 path's coin type.\n  // However, some early chains may choose to use the Cosmos Hub BIP44 path of '118'.\n  // So, this is separated to support such chains.\n  coinType: number;\n  // (Optional) This is used to set the fee of the transaction.\n  // If this field is not provided, Keplr extension will set the default gas price as (low: 0.01, average: 0.025, high: 0.04).\n  // Currently, Keplr doesn't support dynamic calculation of the gas prices based on on-chain data.\n  // Make sure that the gas prices are higher than the minimum gas prices accepted by chain validators and RPC/REST endpoint.\n  gasPriceStep: {\n    low: number;\n    average: number;\n    high: number;\n  };\n  // (Optional)\n  explorer: string;\n}\n")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Cosmos \uae30\ubc18\uc758 Osmosis \ud14c\uc2a4\ud2b8\ub137 (",(0,i.kt)("inlineCode",{parentName:"p"},"osmo-test-4"),") \uc744 \ucd94\uac00\ud574\ubcf4\ub294 \uc608\uc81c\ub97c \uac19\uc774 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n",(0,i.kt)("inlineCode",{parentName:"p"},"Add Chain")," \ubc84\ud2bc\uc744 \ub20c\ub7ec Welldone Wallet\uc5d0 Osmosis Testnet \ub124\ud2b8\uc6cc\ud06c\ub97c \ucd94\uac00\ud574\ubcf4\uc138\uc694. ",(0,i.kt)("inlineCode",{parentName:"p"},"dapp:addChain")," \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 ",(0,i.kt)("inlineCode",{parentName:"p"},"dapp:accounts")," \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uba3c\uc800 \uc9c0\uac11\uc5d0 \uc5f0\uacb0\ud574\uc57c \ud569\ub2c8\ub2e4."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function addChain() {\n  // Cosmos-SDK based chain parameter Sample - Osmosis Testnet\n  const chainData = {\n    chainId: "osmo-test-4",\n    chainName: "Osmosis Testnet",\n    rpc: "https://osmosis-testnet-rpc.allthatnode.com:26657/",\n    rest: "https://osmosis-testnet-rpc.allthatnode.com:1317/",\n    bip44: {\n      coinType: 118\n    },\n    bech32Config: {\n      bech32PrefixAccAddr: "osmo",\n      bech32PrefixAccPub: "osmopub",\n      bech32PrefixValAddr: "osmovaloper",\n      bech32PrefixValPub: "osmovaloperpub",\n      bech32PrefixConsAddr: "osmovalcons",\n      bech32PrefixConsPub: "osmovalconspub"\n    },\n    stakeCurrency: {\n      coinDenom: "OSMO",\n      coinMinimalDenom: "uosmo",\n      coinDecimals: 6\n    },\n    currencies: [\n      {\n        coinDenom: "OSMO",\n        coinMinimalDenom: "uosmo",\n        coinDecimals: 6\n      }\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: "OSMO",\n        coinMinimalDenom: "uosmo",\n        coinDecimals: 6\n      }\n    ],\n    explorer: "https://testnet.mintscan.io/osmosis-testnet",\n    coinType: 118\n    // gasPriceStep: {\n    //   low: 0.01,\n    //   average: 0.025,\n    //   high: 0.05\n    // }\n  };\n\n  async function addChain() {\n    // before adding chain to wallet, you should connect to wallet\n    const accounts = await window.dapp.request("cosmos", {\n      method: "dapp:accounts"\n    });\n    // add chain to wallet\n    const response = await window.dapp.request("cosmos", {\n      method: "dapp:addChain",\n      params: [chainData]\n    });\n  }\n\n  return <Button onClick={addChain}>Add Chain</Button>;\n}\n')))}u.isMDXComponent=!0}}]);