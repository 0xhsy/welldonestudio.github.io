"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[3190],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),d=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?a.createElement(f,l(l({ref:n},s),{},{components:t})):a.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},76552:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var a=t(83117),r=t(80102),o=(t(67294),t(3905)),l=["components"],i={description:"How to add Solana-compatible networks to the WELLDONE wallet.",keywords:["add chain","Solana","Solana-compatible networks"]},c="Solana",d={unversionedId:"add-chain/developer-guide/solana",id:"add-chain/developer-guide/solana",title:"Solana",description:"How to add Solana-compatible networks to the WELLDONE wallet.",source:"@site/docs/add-chain/developer-guide/solana.md",sourceDirName:"add-chain/developer-guide",slug:"/add-chain/developer-guide/solana",permalink:"/add-chain/developer-guide/solana",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/add-chain/developer-guide/solana.md",tags:[],version:"current",frontMatter:{description:"How to add Solana-compatible networks to the WELLDONE wallet.",keywords:["add chain","Solana","Solana-compatible networks"]},sidebar:"tutorialSidebar",previous:{title:"Ethereum",permalink:"/add-chain/developer-guide/ethereum"},next:{title:"Code",permalink:"/code"}},s={},p=[{value:"Solana params",id:"solana-params",level:2},{value:"Example",id:"example",level:2}],u={toc:p};function m(e){var n=e.components,t=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"solana"},"Solana"),(0,o.kt)("h2",{id:"solana-params"},"Solana params"),(0,o.kt)("p",null,"To add Solana-compatible networks or other networks to the WELLDONE wallet, send the following object as a factor to ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),". This is the ",(0,o.kt)("strong",{parentName:"p"},"Universal Chain Standard")," proposed by WELLDONE Wallet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Solana"',title:'"Solana"'},"interface RpcUrl {\n  providerName: string;\n  url: string;\n}\n\ninterface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address?: string;\n}\n\ninterface ExplorerUrl {\n  name: string;\n  url: string;\n  standard?: string;\n}\n\ninterface ChainData {\n  chainId: string;\n  chainName: string;\n  rpcUrls: Array<RpcUrl>;\n  nativeCurrencies: Array<Currency>;\n  feeCurrencies: Array<Currency>;\n  // (Optional)\n  blockExplorerUrls: Array<ExplorerUrl>;\n  // (Optional)\n  iconUrls: Array<string>;\n  slip44: string;\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Consider adding a Solana Devnet network to the WELLDONE wallet as an example. To add a Solana Devnet network to the WELLDONE Wallet, click the ",(0,o.kt)("inlineCode",{parentName:"p"},"AddChain")," button. You must first connect to your wallet using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp:accounts")," method before using method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function addChain() {\n  const chainData = {\n    chainId: 'devnet',\n    chainName: 'Solana Devnet',\n    rpcUrls: [\n      {\n        providerName: 'All That Node',\n        url: 'https://solana-devnet-rpc.allthatnode.com/',\n      },\n    ],\n    nativeCurrencies: [\n      {\n        name: 'Solana',\n        symbol: 'SOL',\n        decimals: 18,\n      },\n    ],\n    feeCurrencies: [\n      {\n        name: 'Solana',\n        symbol: 'SOL',\n        decimals: 18,\n      },\n    ],\n    blockExplorerUrls: [\n      {\n        name: 'Solana Devnet Explorer',\n        url: 'https://explorer.solana.com/?cluster=devnet',\n      },\n    ],\n    iconUrls: [],\n    slip44: '501',\n  };\n\n  async function addChain() {\n    // before adding chain to wallet, you should connect to wallet first\n    const accounts = await window.dapp.request('solana', {\n      method: 'dapp:accounts',\n    });\n    // add chain to wallet\n    const response = await window.dapp.request('solana', {\n      method: 'dapp:addChain',\n      params: [chainData],\n    });\n  }\n  return <Button onClick={addChain}>Add Chain</Button>;\n}\n")))}m.isMDXComponent=!0}}]);