"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[952],{3905:function(n,e,t){t.d(e,{Zo:function(){return d},kt:function(){return m}});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function l(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var c=r.createContext({}),s=function(n){var e=r.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):l(l({},e),n)),t},d=function(n){var e=s(n.components);return r.createElement(c.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,c=n.parentName,d=i(n,["components","mdxType","originalType","parentName"]),u=s(t),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return t?r.createElement(f,l(l({ref:e},d),{},{components:t})):r.createElement(f,l({ref:e},d))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},306:function(n,e,t){t.r(e),t.d(e,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var r=t(3117),a=t(102),o=(t(7294),t(3905)),l=["components"],i={},c=void 0,s={unversionedId:"add-chain/Solana",id:"add-chain/Solana",title:"Solana",description:"Solana params",source:"@site/docs/add-chain/Solana.md",sourceDirName:"add-chain",slug:"/add-chain/Solana",permalink:"/docs/add-chain/Solana",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/docs/add-chain/Solana.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ethereum",permalink:"/docs/add-chain/Ethereum"},next:{title:"Provider API",permalink:"/docs/provider-api"}},d={},p=[{value:"Solana params",id:"solana-params",level:2},{value:"Example",id:"example",level:2}],u={toc:p};function m(n){var e=n.components,t=(0,a.Z)(n,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"solana-params"},"Solana params"),(0,o.kt)("p",null,"To add Solana-compatible networks to the WELLDONE wallet, send the following object as a factor to ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),". WELLDONE wallet suggests the ",(0,o.kt)("strong",{parentName:"p"},"Universal Chain Standard")," for the Solana network, as the following."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Solana"',title:'"Solana"'},"interface RpcUrl {\n  providerName: string;\n  url: string;\n}\n\ninterface Currency {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address?: string;\n}\n\ninterface ExplorerUrl {\n  name: string;\n  url: string;\n  standard?: string;\n}\n\ninterface ChainData {\n  chainId: string;\n  chainName: string;\n  rpcUrls: Array<RpcUrl>;\n  nativeCurrencies: Array<Currency>;\n  feeCurrencies: Array<Currency>;\n  // (Optional)\n  blockExplorerUrls: Array<ExplorerUrl>;\n  // (Optional)\n  iconUrls: Array<string>;\n  slip44: string;\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Consider adding a Solana Devnet network to the WELLDONE wallet as an example. To add a Solana Devnet network to the WELLDONE Wallet, click the ",(0,o.kt)("inlineCode",{parentName:"p"},"AddChain")," button. You must first connect to your wallet using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp:accounts")," method before using the method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function addChain() {\n  const chainData = {\n    chainId: 'devnet',\n    chainName: 'Solana Devnet',\n    rpcUrls: [\n      {\n        providerName: 'All That Node',\n        url: 'https://solana-devnet-rpc.allthatnode.com/',\n      },\n    ],\n    nativeCurrencies: [\n      {\n        name: 'Solana',\n        symbol: 'SOL',\n        decimals: 18,\n      },\n    ],\n    feeCurrencies: [\n      {\n        name: 'Solana',\n        symbol: 'SOL',\n        decimals: 18,\n      },\n    ],\n    blockExplorerUrls: [\n      {\n        name: 'Solana Devnet Explorer',\n        url: 'https://explorer.solana.com/?cluster=devnet',\n      },\n    ],\n    iconUrls: [],\n    slip44: '501',\n  };\n\n  async function addChain() {\n    // before adding chain to wallet, you should connect to wallet first\n    const accounts = await window.dapp.request('solana', {\n      method: 'dapp:accounts',\n    });\n    // add chain to wallet\n    const response = await window.dapp.request('solana', {\n      method: 'dapp:addChain',\n      params: [chainData],\n    });\n  }\n  return <Button onClick={addChain}>Add Chain</Button>;\n}\n")))}m.isMDXComponent=!0}}]);