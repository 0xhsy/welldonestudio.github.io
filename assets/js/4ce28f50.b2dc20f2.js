"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[183],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7083:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),i=["components"],c={description:"How to add EVM-compatible networks to the WELLDONE wallet.",keywords:["add chain","etheruem","EVM-compatible networks"]},l=void 0,d={unversionedId:"add-chain/ethereum",id:"add-chain/ethereum",title:"ethereum",description:"How to add EVM-compatible networks to the WELLDONE wallet.",source:"@site/docs/add-chain/ethereum.md",sourceDirName:"add-chain",slug:"/add-chain/ethereum",permalink:"/docs/add-chain/ethereum",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/add-chain/ethereum.md",tags:[],version:"current",frontMatter:{description:"How to add EVM-compatible networks to the WELLDONE wallet.",keywords:["add chain","etheruem","EVM-compatible networks"]},sidebar:"tutorialSidebar",previous:{title:"cosmos",permalink:"/docs/add-chain/cosmos"},next:{title:"solana",permalink:"/docs/add-chain/solana"}},s={},u=[{value:"Ethereum params",id:"ethereum-params",level:2},{value:"Example",id:"example",level:2}],p={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"ethereum-params"},"Ethereum params"),(0,o.kt)("p",null,"To add EVM-compatible networks to the WELLDONE wallet, send the following object as a factor to ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Ethereum"',title:'"Ethereum"'},"interface ChainData {\n  // Identifier to distinguish the chain\n  chainId: string;\n  // The name of the chain to be displayed to the user.\n  chainName: string;\n  // RPC endpoint of the chain.\n  rpcUrls: Array<string>;\n  iconUrls: Array<string>;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  blockExplorerUrls: Array<string>;\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"The following is an example that the addition of an EVM-compatible Ubiq testnet.\nClick the ",(0,o.kt)("inlineCode",{parentName:"p"},"Add Chain")," button. You must first connect to your wallet using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp:accounts")," method before using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp:addChain")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function addChain() {\n  // Ethereum based chain parameter Sample - Ubiq\n  const chainData = {\n    chainId: '0x8',\n    chainName: 'Ubiq',\n    rpcUrls: ['https://rpc.octano.dev'],\n    iconUrls: [''],\n    nativeCurrency: {\n      name: 'Ubiq Ether',\n      symbol: 'UBQ',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://ubiqscan.io'],\n  };\n\n  async function addChain() {\n    // before adding chain to wallet, you should connect to wallet first\n    const accounts = await window.dapp.request('ethereum', {\n      method: 'dapp:accounts',\n    });\n    // add chain to wallet\n    const response = await window.dapp.request('ethereum', {\n      method: 'dapp:addChain',\n      params: [chainData],\n    });\n  }\n  return <Button onClick={addChain}>Add Chain</Button>;\n}\n")))}m.isMDXComponent=!0}}]);