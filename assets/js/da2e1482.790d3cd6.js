"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[7239],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var a=t(67294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),d=l(t),m=r,T=d["".concat(c,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(T,s(s({ref:e},p),{},{components:t})):a.createElement(T,s({ref:e},p))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:r,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4300:function(n,e,t){t.r(e),t.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var a=t(83117),r=t(80102),o=(t(67294),t(3905)),s=["components"],i={keywords:["Aptos sendTransaction","dapp:signAndSendTransaction","Aptos"],description:"Sending Transactions in Aptos"},c="Aptos",l={unversionedId:"wallet/developer-guide/sending-transaction/aptos",id:"wallet/developer-guide/sending-transaction/aptos",title:"Aptos",description:"Sending Transactions in Aptos",source:"@site/docs/wallet/developer-guide/sending-transaction/aptos.md",sourceDirName:"wallet/developer-guide/sending-transaction",slug:"/wallet/developer-guide/sending-transaction/aptos",permalink:"/wallet/developer-guide/sending-transaction/aptos",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/developer-guide/sending-transaction/aptos.md",tags:[],version:"current",frontMatter:{keywords:["Aptos sendTransaction","dapp:signAndSendTransaction","Aptos"],description:"Sending Transactions in Aptos"},sidebar:"tutorialSidebar",previous:{title:"Sending Transactions",permalink:"/sending-transaction"},next:{title:"Celestia",permalink:"/wallet/developer-guide/sending-transaction/celestia"}},p={},u=[{value:"1. Returns",id:"1-returns",level:2},{value:"2. Params",id:"2-params",level:2},{value:"3. Example",id:"3-example",level:2}],d={toc:u};function m(n){var e=n.components,t=(0,r.Z)(n,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"aptos"},"Aptos"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The following is an explanation of how to initiate a transfer transaction in Aptos network by invoking the through ",(0,o.kt)("inlineCode",{parentName:"p"},"dapp.request"),". We recommend utilizing a dedicated library rather than accessing the service directly if you want a greater degree of abstraction than the official API provides.")),(0,o.kt)("p",null,"To send a transaction in Aptos network, it needs to be followed the steps below."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Detecting of Universal Provider (",(0,o.kt)("inlineCode",{parentName:"li"},"window.dapp"),")"),(0,o.kt)("li",{parentName:"ol"},"Detecting the Aptos network to which the user is linked"),(0,o.kt)("li",{parentName:"ol"},"Import the Aptos account of the user")),(0,o.kt)("p",null,"The WELLDONE Wallet finds and imports networks associated with that wallet address. Before submitting a transaction, you should evaluate whether to transmit it to the mainnet or the testnet. The following format can be used to transmit the transaction:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const response = await dapp.request('aptos', {\n  method: 'dapp:signAndSendTransaction',\n  params: [HEX_STRING_TX_DATA],\n});\n")),(0,o.kt)("h2",{id:"1-returns"},"1. Returns"),(0,o.kt)("p",null,"This method returns the transaction hash value as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise")," object of type string because you can send multiple transactions as well as one transaction."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string[]>;\n")),(0,o.kt)("h2",{id:"2-params"},"2. Params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type HEX_STRING_TX_DATA = string;\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"HEX_STRING_TX_DATA")," must be passed to the parameter in order for a transaction to be sent from Aptos. The ",(0,o.kt)("inlineCode",{parentName:"li"},"aptos")," library can provide these values, and the ",(0,o.kt)("a",{parentName:"li",href:"https://aptos-labs.github.io/ts-sdk-doc/modules.html"},"link")," and the example below can explain their detailed usage.")),(0,o.kt)("h2",{id:"3-example"},"3. Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { AptosClient, TxnBuilderTypes, BCS } from 'aptos';\nconst getSerializedTransaction = async (accounts) => {\n  try {\n    const aptosClient = new AptosClient('https://fullnode.devnet.aptoslabs.com/v1');\n\n    const token = new TxnBuilderTypes.TypeTagStruct(\n      TxnBuilderTypes.StructTag.fromString('0x1::aptos_coin::AptosCoin'),\n    );\n\n    const entryFunctionPayload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n      TxnBuilderTypes.EntryFunction.natural(\n        '0x1::coin',\n        'transfer',\n        [token],\n        [\n          BCS.bcsToBytes(TxnBuilderTypes.AccountAddress.fromHex(accounts.address)),\n          BCS.bcsSerializeUint64(100),\n        ],\n      ),\n    );\n\n    const rawTx = await aptosClient.generateRawTransaction(\n      accounts.address,\n      entryFunctionPayload,\n      { maxGasAmount: 200000 },\n    );\n\n    const rawTxnWithSalt = `0x${Buffer.concat([\n      Buffer.from(sha3_256(Buffer.from('APTOS::RawTransaction', 'ascii')), 'hex'),\n      Buffer.from(BCS.bcsToBytes(rawTx)),\n    ]).toString('hex')}`;\n\n    return rawTxnWithSalt;\n  } catch (error) {\n    alert(error.message);\n  }\n};\n\nasync function sendTransaction() {\n  try {\n    const HEX_STRING_TX_DATA = await getSerializedTransaction();\n    const response = await dapp.request(CHAIN_NAME, {\n      method: 'dapp:signAndSendTransaction',\n      params: [`${HEX_STRING_TX_DATA}`],\n    });\n    const txHash = response[0];\n\n    setTxHash(txHash);\n  } catch (error) {\n    alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n  }\n}\n\nconst sendTransaction = async () => {\n  // get accounts first\n  const accounts = await dapp.request('aptos', { method: 'dapp:accounts' });\n  const HEX_STRING_TX_DATA = await getSerializedTransaction(accounts['aptos']);\n  // sending a transaction\n  try {\n    const response = await dapp.request('aptos', {\n      method: 'dapp:signAndSendTransaction',\n      params: [\n        // use serialized transaction\n        [`${HEX_STRING_TX_DATA}`],\n      ],\n    });\n    const txHash = response[0];\n  } catch (error) {\n    /*\n        {\n          message: 'User denied transaction signature',\n          code: 4001,\n        }\n      */\n  }\n};\n")),(0,o.kt)("p",null,"To complete the transaction, follow the steps outlined below. A faucet is required to transmit a transaction. You can request faucet through the FAUCET tab in the wallet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'aptos';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n  const getSerializedTransaction = async () => {\n    try {\n      const aptosClient = new AptosClient('https://fullnode.devnet.aptoslabs.com/v1');\n      \n      const token = new TxnBuilderTypes.TypeTagStruct(\n        TxnBuilderTypes.StructTag.fromString('0x1::aptos_coin::AptosCoin'),\n      );\n\n      const entryFunctionPayload = new TxnBuilderTypes.TransactionPayloadEntryFunction(\n        TxnBuilderTypes.EntryFunction.natural(\n          '0x1::coin',\n          'transfer',\n          [token],\n          [\n            BCS.bcsToBytes(TxnBuilderTypes.AccountAddress.fromHex(accounts.address)),\n            BCS.bcsSerializeUint64(100),\n          ],\n        ),\n      );\n\n      const rawTx = await aptosClient.generateRawTransaction(\n        accounts.address,\n        entryFunctionPayload,\n        { maxGasAmount: 200000 },\n      );\n\n      const rawTxnWithSalt = `0x${Buffer.concat([\n        Buffer.from(sha3_256(Buffer.from('APTOS::RawTransaction', 'ascii')), 'hex'),\n        Buffer.from(BCS.bcsToBytes(rawTx)),\n      ]).toString('hex')}`;\n\n      return rawTxnWithSalt;\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n      if (Object.keys(accounts).length === 0) {\n        throw new Error('There is no accounts.');\n      }\n      const status = await window.dapp.request('aptos', {\n        method: 'GET',\n        params: [\n          {\n            url: '/',\n          },\n        ],\n      });\n      if ((status.chain_id === 1) | (status.chain_id === 2)) {\n        throw new Error('Please chagne to APTOS devnet in WELLDONE Wallet');\n      }\n      setAccounts(accounts[CHAIN_NAME]);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n\n  async function handleSendTransaction() {\n    try {\n      const HEX_STRING_TX_DATA = await getSerializedTransaction();\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:signAndSendTransaction',\n        params: [`${HEX_STRING_TX_DATA}`],\n      });\n      const txHash = response[0];\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts.address}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);