"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[6183],{3905:function(n,t,e){e.d(t,{Zo:function(){return u},kt:function(){return f}});var r=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function i(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,r,o=function(n,t){if(null==n)return{};var e,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var c=r.createContext({}),l=function(n){var t=r.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):i(i({},t),n)),e},u=function(n){var t=l(n.components);return r.createElement(c.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,o=n.mdxType,a=n.originalType,c=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),d=l(e),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||a;return e?r.createElement(m,i(i({ref:t},u),{},{components:e})):r.createElement(m,i({ref:t},u))}));function f(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var a=e.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=n,s.mdxType="string"==typeof n?n:o,i[1]=s;for(var l=2;l<a;l++)i[l]=e[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},250:function(n,t,e){e.r(t),e.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p}});var r=e(83117),o=e(80102),a=(e(67294),e(3905)),i=["components"],s={slug:"/wallet/zkWallet/sign-transaction",sidebar_position:2,description:"WELLDONE zkWallet for developer"},c="Sign Transaction",l={unversionedId:"wallet/zkWallet/sign-transaction/index",id:"wallet/zkWallet/sign-transaction/index",title:"Sign Transaction",description:"WELLDONE zkWallet for developer",source:"@site/docs/wallet/zkWallet/sign-transaction/index.md",sourceDirName:"wallet/zkWallet/sign-transaction",slug:"/wallet/zkWallet/sign-transaction",permalink:"/wallet/zkWallet/sign-transaction",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/tree/master/docs/wallet/zkWallet/sign-transaction/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{slug:"/wallet/zkWallet/sign-transaction",sidebar_position:2,description:"WELLDONE zkWallet for developer"},sidebar:"tutorialSidebar",previous:{title:"Get Account",permalink:"/wallet/zkWallet/get-account"},next:{title:"Send Transaction",permalink:"/wallet/zkWallet/send-transaction"}},u={},p=[],d={toc:p};function f(n){var t=n.components,e=(0,o.Z)(n,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sign-transaction"},"Sign Transaction"),(0,a.kt)("p",null,"WELLDONE zkWallet for developer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function signTransaction() {\n  const ZKWALLET = 'https://zkwallet.welldonestudio.io';\n  const CHAIN_NAME = `sui:devnet`;\n  const SUI_RPC_URL = 'https://wallet-rpc.devnet.sui.io/';\n  const [account, setAccount] = useState(null);\n\n  const request = async (method, params) => {\n    const res = await fetch(SUI_RPC_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: 0,\n        jsonrpc: '2.0',\n        method,\n        params: params || [],\n      }),\n    });\n\n    const { result } = await res.json();\n    return result;\n  };\n\n  /*\n    This is an example of a sui provider\n    Production development should use JsonRpcProvider from @mysten/sui.js\n    https://github.com/MystenLabs/sui/tree/main/sdk/typescript#writing-apis\n  */\n  const suiProvider = {\n    provider: {\n      getReferenceGasPrice: async () => {\n        const result = await request('suix_getReferenceGasPrice', []);\n        return result;\n      },\n      getCoins: async ({ owner, coinType }) => {\n        const result = await request('suix_getCoins', [owner, coinType]);\n        return result;\n      },\n      multiGetObjects: async ({ ids, options }) => {\n        const result = await request('sui_multiGetObjects', [ids, options]);\n        return result;\n      },\n      dryRunTransactionBlock: async ({ transactionBlock }) => {\n        const result = await request('sui_dryRunTransactionBlock', [\n          typeof transactionBlock === 'string'\n            ? transactionBlock\n            : Buffer.from(transactionBlock).toString('base64'),\n        ]);\n        return result;\n      },\n    },\n  };\n\n  const getSerializedTransaction = async () => {\n    try {\n      const coins = await request('suix_getCoins', [account]);\n\n      const coinType = '0x2::sui::SUI';\n      const filtered = coins.data.filter((item) => item.coinType === coinType);\n\n      const txb = new TransactionBlock();\n      txb.setSender(account);\n\n      txb.setGasPayment(\n        filtered.map((item) => {\n          return {\n            objectId: item.coinObjectId,\n            version: item.version,\n            digest: item.digest,\n          };\n        }),\n      );\n      const [coin] = txb.splitCoins(txb.gas, [txb.pure(10000000)]);\n\n      txb.transferObjects([coin], txb.pure(account));\n      const transactionBlock = await txb.build(suiProvider);\n      return `0x${Buffer.from(transactionBlock).toString('hex')}`;\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n\n  async function handleSignTransaction() {\n    const unsignedTx = await getSerializedTransaction();\n    const url = new URL('connect', ZKWALLET);\n    url.searchParams.set('chain', CHAIN_NAME);\n    url.searchParams.set('callback', `${window.location.origin}/wallet/zkWallet/send-transaction`);\n    url.searchParams.set('jsonrpc', JSON.stringify({\n      jsonrpc: '2.0',\n      id: 0,\n      method: 'dapp:signTransaction',\n      params: [\n        {\n          unsignedTx,\n        }\n      ]\n    }));\n    window.location.href = url.toString();\n  }\n\n  useEffect(() => {\n    try {\n      const url = new URL(window.location.href);\n      const { result } = JSON.parse(url.searchParams.get('jsonrpc'));\n      result && result[0] && setAccount(result[0].address);\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n\n  return (\n    <>\n      <Button disabled={!account} onClick={handleSignTransaction} type=\"button\">\n        Sign Transaction\n      </Button>\n      <div>{!!account ? 'You can sign transaction' : 'You can not sign transaction'}</div>\n    </>\n  );\n}\n")))}f.isMDXComponent=!0}}]);