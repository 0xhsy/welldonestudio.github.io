"use strict";(self.webpackChunkwelldone_docs=self.webpackChunkwelldone_docs||[]).push([[33],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6234:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return d}});var a=n(3117),o=n(102),r=(n(7294),n(3905)),s=["components"],i={sidebar_position:3},l="Methods",c={unversionedId:"provider-api/method",id:"provider-api/method",title:"Methods",description:"dapp provider has the following methods.",source:"@site/docs/provider-api/method.md",sourceDirName:"provider-api",slug:"/provider-api/method",permalink:"/docs/provider-api/method",draft:!1,editUrl:"https://github.com/welldonestudio/welldonestudio.github.io/blob/master/docs/provider-api/method.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Chain Names",permalink:"/docs/provider-api/chain-names"},next:{title:"Events",permalink:"/docs/provider-api/events"}},p={},d=[{value:"1. dapp:accounts",id:"account",level:2},{value:"Params",id:"params",level:3},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:3},{value:"2. dapp:addChain",id:"addChain",level:2},{value:"Params",id:"params-1",level:3},{value:"Example",id:"example-1",level:3},{value:"3. dapp:sendTransaction",id:"sendTransaction",level:2},{value:"Params",id:"params-2",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Example",id:"example-2",level:3},{value:"4. dapp:getBalance",id:"getBalance",level:2},{value:"Params",id:"params-3",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Example",id:"example-3",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"methods"},"Methods"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"dapp provider")," has the following methods."),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#account"},"dapp:accounts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#addChain"},"dapp:addChain")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#sendTransaction"},"dapp:sendTransaction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#getBalance"},"dapp:getBalance")))),(0,r.kt)("h2",{id:"account"},"1. dapp:accounts"),(0,r.kt)("p",null,"The method is used to request a wallet connection. A website can use this function to request a connection to your wallet, and if the user in the wallet approves the connection, the website can access your account. This approach asks for connections to all chains at the same time. In other words, if you make a request with ",(0,r.kt)("inlineCode",{parentName:"p"},"ethereum")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"chainName"),", you will be granted access to the ",(0,r.kt)("inlineCode",{parentName:"p"},"cosmos")," or other networks. If the webpage is already linked to your wallet, it imports the information from your account without asking your additional authorization."),(0,r.kt)("h3",{id:"params"},"Params"),(0,r.kt)("p",null,"The method takes the following input argument as a ",(0,r.kt)("inlineCode",{parentName:"p"},"chainName"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"type ChainName = 'celo' | 'cosmos' | 'ethereum' | 'klaytn' | 'near' | 'neon' | 'solana';\n\nwindow.dapp.request(chainName: ChainName, { method: \"dapp:accounts\" })\n")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,"The method returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"promise")," object with an address and pubKey value with the given chain account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{ "ethereum": { "address": "0x....", "pubKey": "0x...." } }\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We are planning to support more ",(0,r.kt)("inlineCode",{parentName:"li"},"account")," values in future releases.")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("p",null,"The example is to query the address from Ethereum."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function connect() {\n  const [address, setAddress] = React.useState(null);\n  const [pubKey, setPubKey] = React.useState(null);\n  async function getAccounts() {\n    // request connection to WELLDONE extension\n    const accounts = await window.dapp.request('ethereum', {\n      method: 'dapp:accounts',\n    });\n    // check if accounts exists\n    if (Object.keys(accounts).length !== 0) {\n      setAddress(accounts.ethereum.address);\n      setPubKey(accounts.ethereum.pubKey);\n    }\n  }\n  return (\n    <>\n      <Button onClick={getAccounts}>Connect Wallet</Button>\n      {address && (\n        <ResultTooltip style={{ background: '#3B48DF' }}>\n          <b>address: </b> {address} <br />\n          <b>pubKey: </b> {pubKey}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")),(0,r.kt)("h2",{id:"addChain"},"2. dapp:addChain"),(0,r.kt)("p",null,"The method is to be utilized when adding other networks on the WELLDONE wallet. For the earlier release of WELLDONE wallet, it supports ",(0,r.kt)("strong",{parentName:"p"},"Ethereum"),", ",(0,r.kt)("strong",{parentName:"p"},"Cosmos")," and ",(0,r.kt)("strong",{parentName:"p"},"Solana"),". We are planning to support more networks for future releases."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"WELLDONE Studio operates ",(0,r.kt)("a",{parentName:"p",href:"https://addchain.welldonestudio.io/ethereum"},"AddChain")," to add networks to your wallet, as well as the directly using ",(0,r.kt)("inlineCode",{parentName:"p"},"dapp:addChain")," method. More details may be found ","[here]"," (",(0,r.kt)("a",{parentName:"p",href:"https://docs.welldonestudio.io/docs/add-chain"},"https://docs.welldonestudio.io/docs/add-chain"),").")),(0,r.kt)("h3",{id:"params-1"},"Params"),(0,r.kt)("p",null,"The method takes ",(0,r.kt)("inlineCode",{parentName:"p"},"chainName")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"chainData")," that designates the network that you are going to add. See more information that you are requiredf to pass on ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," for the following sections."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/add-chain/Cosmos"},"For Cosmos-based networks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/add-chain/Ethereum"},"For EVM-compatible networks")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/add-chain/Solana"},"For Solana network"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"type ChainName = 'cosmos' | 'ethereum' | 'solana';\n\nawait dapp.request(chainName: ChainName, (\n    method: \"dapp:addChain\",\n    params: [chainData]\n))\n")),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,"The following is a simple example that adds Ubiq network that is EVM compatible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function addChain() {\n  // Ethereum based chain parameter Sample - Ubiq\n  const chainData = {\n    chainId: '0x8',\n    chainName: 'Ubiq',\n    rpcUrls: ['https://rpc.octano.dev'],\n    iconUrls: [''],\n    nativeCurrency: {\n      name: 'Ubiq Ether',\n      symbol: 'UBQ',\n      decimals: 18,\n    },\n    blockExplorerUrls: ['https://ubiqscan.io'],\n  };\n\n  async function addChain() {\n    // before adding chain to wallet, you should connect to wallet first\n    const accounts = await window.dapp.request('ethereum', {\n      method: 'dapp:accounts',\n    });\n    // add chain to wallet\n    const response = await window.dapp.request('ethereum', {\n      method: 'dapp:addChain',\n      params: [chainData],\n    });\n  }\n  return <Button onClick={addChain}>Add Chain</Button>;\n}\n")),(0,r.kt)("h2",{id:"sendTransaction"},"3. dapp:sendTransaction"),(0,r.kt)("p",null,"The method is to send transaction from sending a simple ERC20 to deploy contract. You can change the state of the contract with utilizing the single method."),(0,r.kt)("h3",{id:"params-2"},"Params"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CHAIN NAME")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TRANSACTION_PARAMETER")," are two parameters. ",(0,r.kt)("inlineCode",{parentName:"p"},"CHAIN_NAME")," is the name of the network to which you wish to add, and ",(0,r.kt)("inlineCode",{parentName:"p"},"TRANSACTION_PARAMETER")," is the value of converting the transaction to a string type. Because a transaction format differs by networks, WELLDONE Wallet executes the transaction by taking the input argument in string type then translate it to compatible to the targeted network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"type CHAIN_NAME = 'ethereum' | 'cosmos' | 'near' | 'solana' | 'klaytn' | 'celo' | 'neon';\ntype TRANSACTION_PARAMETER = 'string';\n\nconst response = await dapp.request(CHAIN_NAME, {\n  method: 'dapp:sendTransaction',\n  params: [TRANSACTION_PARAMETER],\n});\n")),(0,r.kt)("p",null,"The following sections for each network provide details of what needs to be communicated to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TRANSACTION_PARAMETER"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/Sending%20Transactions/Ethereum"},"Ethereum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/Sending%20Transactions/Cosmos"},"Cosmos")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/Sending%20Transactions/Near"},"Near")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/Sending%20Transactions/Klaytn"},"Klaytn")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.welldonestudio.io/docs/Sending%20Transactions/Celo"},"Celo"))),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"Promise<string>;\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can transaction hash as the aformentioned format.")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("p",null,"The following is an example to execute transaction on Ethereum network. You need to request testnet ETH from the ",(0,r.kt)("a",{parentName:"p",href:"https://www.allthatnode.com/faucet/ethereum.dsrv"},"faucet"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'ethereum';\n  const [accounts, setAccounts] = React.useState(null);\n  const [txHash, setTxHash] = React.useState(null);\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n\n      setAccounts(accounts[CHAIN_NAME].address);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  async function handleSendTransaction() {\n    try {\n      const transactionParameters = {\n        from: accounts,\n        to: '0x08505F42D5666225d5d73B842dAdB87CCA44d1AE', //allthatnode\n        gas: '0x76c0',\n        gasPrice: '0x9184e72a000',\n        value: '0x00',\n        data: '0x6057361d000000000000000000000000000000000000000000000000000000000008a198',\n      };\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:sendTransaction',\n        params: [JSON.stringify(transactionParameters)],\n      });\n      const txHash = response.hash;\n\n      setTxHash(txHash);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleSendTransaction} type=\"button\">\n            Send a Transaction\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {txHash && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Transaction Hash:</b> {txHash}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")),(0,r.kt)("h2",{id:"getBalance"},"4. dapp:getBalance"),(0,r.kt)("p",null,"The method returns balance from the address."),(0,r.kt)("h3",{id:"params-3"},"Params"),(0,r.kt)("p",null,"The method takes the network and account infromation to query balance as an argument."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"type CHAIN_NAME = 'ethereum' | 'cosmos' | 'near' | 'solana' | 'klaytn' | 'celo' | 'neon';\ntype ACCOUNTS = string;\n\nconst response = await dapp.request(CHAIN_NAME, {\n  method: 'dapp:getBalance',\n  params: [ACCOUNTS],\n});\nconst txHash = response.hash;\n")),(0,r.kt)("h3",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"The return value is differed from the networks that you are going to access."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ethereum, klaytn, celo, neon, near, solana"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Promise<string>\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"cosmos"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Promise<[{ ammout: string, denom: string }]>\n")))),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("p",null,"An example is to query balance from the Ethereum account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function sendTransaction() {\n  const CHAIN_NAME = 'ethereum';\n  const [accounts, setAccounts] = React.useState(null);\n  const [balance, setBalance] = React.useState(null);\n\n  async function handleGetAccount() {\n    try {\n      const accounts = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:accounts',\n      });\n\n      setAccounts(accounts[CHAIN_NAME].address);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  async function handleGetBalance() {\n    try {\n      const response = await dapp.request(CHAIN_NAME, {\n        method: 'dapp:getBalance',\n        params: [accounts],\n      });\n\n      setBalance(response);\n    } catch (error) {\n      console.log(error);\n      alert(`Error Message: ${error.message}\\nError Code: ${error.code}`);\n    }\n  }\n\n  return (\n    <>\n      {accounts ? (\n        <>\n          <Button onClick={handleGetBalance} type=\"button\">\n            Get Balance\n          </Button>\n          <ResultTooltip style={{ background: '#3B48DF' }}>\n            <b>Accounts:</b> {accounts}\n          </ResultTooltip>\n        </>\n      ) : (\n        <>\n          <Button onClick={handleGetAccount} type=\"button\">\n            Get Account\n          </Button>\n          <div>You have to get account first!</div>\n        </>\n      )}\n      {balance && (\n        <ResultTooltip style={{ background: '#F08080' }}>\n          <b>Balance:</b> {balance}\n        </ResultTooltip>\n      )}\n    </>\n  );\n}\n")))}m.isMDXComponent=!0}}]);